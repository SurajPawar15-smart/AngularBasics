{
  "_args": [
    [
      {
        "raw": "critters@0.0.10",
        "scope": null,
        "escapedName": "critters",
        "name": "critters",
        "rawSpec": "0.0.10",
        "spec": "0.0.10",
        "type": "version"
      },
      "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular"
    ]
  ],
  "_from": "critters@0.0.10",
  "_hasShrinkwrap": false,
  "_id": "critters@0.0.10",
  "_location": "/critters",
  "_nodeVersion": "12.20.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/critters_0.0.10_1616610383351_0.19694513685266002"
  },
  "_npmUser": {
    "name": "janicklas-ralph",
    "email": "janicklasralph036@gmail.com"
  },
  "_npmVersion": "6.14.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "critters@0.0.10",
    "scope": null,
    "escapedName": "critters",
    "name": "critters",
    "rawSpec": "0.0.10",
    "spec": "0.0.10",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/build-angular"
  ],
  "_resolved": "https://registry.npmjs.org/critters/-/critters-0.0.10.tgz",
  "_shasum": "edd0e962fc5af6c4adb6dbf1a71bae2d3f917000",
  "_shrinkwrap": null,
  "_spec": "critters@0.0.10",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular",
  "author": {
    "name": "The Chromium Authors"
  },
  "bugs": {
    "url": "https://github.com/GoogleChromeLabs/critters/issues"
  },
  "contributors": [
    {
      "name": "Jason Miller",
      "email": "developit@google.com"
    },
    {
      "name": "Janicklas Ralph",
      "email": "janicklas@google.com"
    }
  ],
  "dependencies": {
    "chalk": "^4.1.0",
    "css": "^3.0.0",
    "parse5": "^6.0.1",
    "parse5-htmlparser2-tree-adapter": "^6.0.1",
    "pretty-bytes": "^5.3.0"
  },
  "description": "Plugin to inline critical CSS and lazy-load the rest.",
  "devDependencies": {
    "@babel/preset-env": "^7.11.0",
    "babel-core": "^6.26.0",
    "babel-jest": "^26.3.0",
    "css-loader": "^4.2.1",
    "documentation": "^13.0.2",
    "eslint": "^7.6.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-config-standard": "^14.1.1",
    "eslint-plugin-import": "^2.11.0",
    "eslint-plugin-jest": "^23.20.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^4.2.1",
    "eslint-plugin-standard": "^4.0.1",
    "file-loader": "^6.0.0",
    "html-webpack-plugin": "^3.2.0",
    "jest": "^26.3.0",
    "microbundle": "^0.12.3",
    "mini-css-extract-plugin": "^0.10.0",
    "webpack": "^4.6.0",
    "webpack-log": "^3.0.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-p5VKhP1803+f+0Jq5P03w1SbiHtpAKm+1EpJHkiPxQPq0Vu9QLZHviJ02GRrWi0dlcJqrmzMWInbwp4d22RsGw==",
    "shasum": "edd0e962fc5af6c4adb6dbf1a71bae2d3f917000",
    "tarball": "https://registry.npmjs.org/critters/-/critters-0.0.10.tgz",
    "fileCount": 22,
    "unpackedSize": 1932750,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgW4RQCRA9TVsSAnZWagAAyf0P/Re4PIGZxgh2F0zsRTYD\n/7BPOJBaaaVsv6TnAjydvnopsNSgvid5L6m0HvPVVRqlVNvP+db7loYyxFZj\nB0kqLDnR19/LGKM0tNgBxvP6pt62FD7LoA2RcPNAGib4oW92zOvW4C6RcYFL\nwNdZnFkjcZAb1Xf1TBOBC/UjdPcaKSa9FgM2lKLGHrJl5PXTJzbUwOjJ1OWq\nqKLBwE3Eo46l9ZCfucfe0eDObEvkqvlgyXb1F8qxr6OZiVpk+6+XMMrn6igd\nCHFtXM5/F8cwcepmWsGCfuV7NFB/diAcNIAYYxSCzdfO4Qt9CVZ6LbN/FI/i\nKHKcPv26G4cBZtuI5RtdO5ynFxX12a47wKnDhKLRr8IfczX6pLaWasBe0FyW\nxieN3wpESaHvU0xofyrh7gVgNwFy8Vs/rtH0eDfGyE8N4q4oCFkugwjzPRCB\n2E5ihqP9Y970umTmd2mjymcWgyVYE9Bq/hKV76jbcinHnxcHSTlfkDSMBJ3A\ni/giR4ayzttcfve6k1p228jGdziSFza49OJ+rH3nIIj1azrqYSKUJMCv8fbB\nOCPL38sWf38xIJMR0cKnsQn2ULI6nuU7kPn6nv7VeZvlzu3sYnxe8bF3I88d\nvPB61GnG1dV7nikmHLjMrO8AxlTZo+bRptxVEFR++vTTEz4Owx/QNn5fpp+x\nW92I\r\n=0T2r\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "src",
    "dist"
  ],
  "gitHead": "1f23cb5b488effe0f782cc6855013fdaec38924c",
  "homepage": "https://github.com/GoogleChromeLabs/critters#readme",
  "jest": {
    "testEnvironment": "jsdom",
    "testURL": "http://localhost",
    "coverageReporters": [
      "text"
    ],
    "collectCoverageFrom": [
      "src/**/*.js"
    ],
    "watchPathIgnorePatterns": [
      "node_modules",
      "dist"
    ]
  },
  "keywords": [
    "critical css",
    "inline css",
    "critical",
    "critters",
    "webpack plugin",
    "performance"
  ],
  "license": "Apache-2.0",
  "main": "dist/critters.js",
  "maintainers": [
    {
      "name": "developit",
      "email": "jason@developit.ca"
    },
    {
      "name": "janicklas-ralph",
      "email": "janicklasralph036@gmail.com"
    }
  ],
  "name": "critters",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <img src=\"https://i.imgur.com/J0jv1Sz.png\" width=\"240\" height=\"240\" alt=\"critters-webpack-plugin\">\n  <h1 align=\"center\">Critters</h1>\n</p>\n\n> Critters is a plugin that inlines your app's [critical CSS] and lazy-loads the rest.\n\n## critters [![npm](https://img.shields.io/npm/v/critters-webpack-plugin.svg?style=flat)](https://www.npmjs.org/package/critters)\n\nIt's a little different from [other options](#similar-libraries), because it **doesn't use a headless browser** to render content. This tradeoff allows Critters to be very **fast and lightweight**. It also means Critters inlines all CSS rules used by your document, rather than only those needed for above-the-fold content. For alternatives, see [Similar Libraries](#similar-libraries).\n\nCritters' design makes it a good fit when inlining critical CSS for prerendered/SSR'd Single Page Applications. It was developed to be an excellent compliment to [prerender-loader](https://github.com/GoogleChromeLabs/prerender-loader), combining to dramatically improve first paint time for most Single Page Applications.\n\n## Features\n\n- Fast - no browser, few dependencies\n- Integrates with Webpack [critters-webpack-plugin]\n- Supports preloading and/or inlining critical fonts\n- Prunes unused CSS keyframes and media queries\n- Removes inlined CSS rules from lazy-loaded stylesheets\n\n## Installation\n\nFirst, install Critters as a development dependency:\n\n```sh\nnpm i -D critters\n```\n\nor\n\n```sh\nyarn add -D critters\n```\n\n## Usage\n\n```diff\n+    const Critters = require('critters');\n\n+    const c = new Critters({\n+      // optional configuration (see below)\n+    })\n+    const res = c.process(html)\n```\n\n## Usage with webpack\n\n```diff\n// webpack.config.js\n+const Critters = require('critters-webpack-plugin');\n\nmodule.exports = {\n  plugins: [\n+    new Critters({\n+      // optional configuration (see below)\n+    })\n  ]\n}\n```\n\nThat's it! The resultant html will have its critical CSS inlined and the stylesheets lazy-loaded.\n\n## Usage\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n### Critters\n\nCreate a Critters plugin instance with the given options.\n\n**Parameters**\n\n- `options` **Options** Options to control how Critters inlines CSS.\n\n**Examples**\n\n```javascript\n// webpack.config.js\nmodule.exports = {\n  plugins: [\n    new Critters({\n      // Outputs: <link rel=\"preload\" onload=\"this.rel='stylesheet'\">\n      preload: 'swap',\n\n      // Don't inline critical font-face rules, but preload the font URLs:\n      preloadFonts: true,\n    }),\n  ],\n};\n```\n\n### Critters\n\nAll optional. Pass them to `new Critters({ ... })`.\n\n**Parameters**\n\n- `options`\n\n**Properties**\n\n- `external` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Inline styles from external stylesheets _(default: `true`)_\n- `inlineThreshold` **[Number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Inline external stylesheets smaller than a given size _(default: `0`)_\n- `minimumExternalSize` **[Number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** If the non-critical external stylesheet would be below this size, just inline it _(default: `0`)_\n- `pruneSource` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Remove inlined rules from the external stylesheet _(default: `true`)_\n- `mergeStylesheets` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Merged inlined stylesheets into a\n  single \\<style\\> tag _(default: `true`)_\n- `additionalStylesheets` **[String[]](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** Glob for matching other stylesheets which should be used to evaluate critical CSS _(default: '')_\n- `preload` **[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** Which [preload strategy](#preloadstrategy) to use\n- `noscriptFallback` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Add `<noscript>` fallback to JS-based strategies\n- `inlineFonts` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Inline critical font-face rules _(default: `false`)_\n- `preloadFonts` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Preloads critical fonts _(default: `true`)_\n- `fonts` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Shorthand for setting `inlineFonts`+`preloadFonts`- Values:\n  - `true` to inline critical font-face rules and preload the fonts\n  - `false` to don't inline any font-face rules and don't preload fonts\n- `keyframes` **[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** Controls which keyframes rules are inlined.- Values:\n  - `\"critical\"`: _(default)_ inline keyframes rules used by the critical CSS\n  - `\"all\"` inline all keyframes rules\n  - `\"none\"` remove all keyframes rules\n- `compress` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Compress resulting critical CSS _(default: `true`)_\n- `logLevel` **[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** Controls [log level](#loglevel) of the plugin _(default: `\"info\"`)_\n\n### LogLevel\n\nControls log level of the plugin. Specifies the level the logger should use. A logger will\nnot produce output for any log level beneath the specified level. Available levels and order\nare:\n\n- **\"info\"** _(default)_\n- **\"warn\"**\n- **\"error\"**\n- **\"trace\"**\n- **\"debug\"**\n- **\"silent\"**\n\nType: (`\"info\"` \\| `\"warn\"` \\| `\"error\"` \\| `\"trace\"` \\| `\"debug\"` \\| `\"silent\"`)\n\n### PreloadStrategy\n\nThe mechanism to use for lazy-loading stylesheets.\n_[JS]_ indicates that a strategy requires JavaScript (falls back to `<noscript>`).\n\n- **default:** Move stylesheet links to the end of the document and insert preload meta tags in their place.\n- **\"body\":** Move all external stylesheet links to the end of the document.\n- **\"media\":** Load stylesheets asynchronously by adding `media=\"not x\"` and removing once loaded. _[JS]_\n- **\"swap\":** Convert stylesheet links to preloads that swap to `rel=\"stylesheet\"` once loaded. _[JS]_\n- **\"js\":** Inject an asynchronous CSS loader similar to [LoadCSS](https://github.com/filamentgroup/loadCSS) and use it to load stylesheets. _[JS]_\n- **\"js-lazy\":** Like `\"js\"`, but the stylesheet is disabled until fully loaded.\n\nType: (default | `\"body\"` \\| `\"media\"` \\| `\"swap\"` \\| `\"js\"` \\| `\"js-lazy\"`)\n\n## Similar Libraries\n\nThere are a number of other libraries that can inline Critical CSS, each with a slightly different approach. Here are a few great options:\n\n- [Critical](https://github.com/addyosmani/critical)\n- [Penthouse](https://github.com/pocketjoso/penthouse)\n- [webpack-critical](https://github.com/lukeed/webpack-critical)\n- [webpack-plugin-critical](https://github.com/nrwl/webpack-plugin-critical)\n- [html-critical-webpack-plugin](https://github.com/anthonygore/html-critical-webpack-plugin)\n- [react-snap](https://github.com/stereobooster/react-snap)\n\n## License\n\n[Apache 2.0](LICENSE)\n\nThis is not an official Google product.\n\n[critical css]: https://www.smashingmagazine.com/2015/08/understanding-critical-css/\n[html-webpack-plugin]: https://github.com/jantimon/html-webpack-plugin\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/GoogleChromeLabs/critters.git"
  },
  "scripts": {
    "build": "npm run -s build:main && npm run -s build:webpack",
    "build:main": "microbundle --target node",
    "build:webpack": "cd packages/critters-webpack-plugin && npm run -s build",
    "docs": "documentation readme -q --no-markdown-toc -a public -s Usage --sort-order alpha src",
    "prepare": "npm run -s build",
    "release": "npm run build -s && git commit -am $npm_package_version && git tag $npm_package_version && git push && git push --tags && npm publish",
    "test": "jest --coverage"
  },
  "source": "src/index.js",
  "typings": "src/index.d.ts",
  "version": "0.0.10"
}
