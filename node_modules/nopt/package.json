{
  "_args": [
    [
      {
        "raw": "nopt@^5.0.0",
        "scope": null,
        "escapedName": "nopt",
        "name": "nopt",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "c:\\Angular\\TaskManager\\node_modules\\node-gyp"
    ]
  ],
  "_from": "nopt@^5.0.0",
  "_hasShrinkwrap": false,
  "_id": "nopt@5.0.0",
  "_location": "/nopt",
  "_nodeVersion": "14.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nopt_5.0.0_1597651591432_0.3563498258220257"
  },
  "_npmUser": {
    "name": "isaacs",
    "email": "i@izs.me"
  },
  "_npmVersion": "7.0.0-beta.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nopt@^5.0.0",
    "scope": null,
    "escapedName": "nopt",
    "name": "nopt",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/node-gyp"
  ],
  "_resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
  "_shasum": "530942bb58a512fccafe53fe210f13a25355dc88",
  "_shrinkwrap": null,
  "_spec": "nopt@^5.0.0",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\node-gyp",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bin": {
    "nopt": "bin/nopt.js"
  },
  "bugs": {
    "url": "https://github.com/npm/nopt/issues"
  },
  "dependencies": {
    "abbrev": "1"
  },
  "description": "Option parsing for Node, supporting types, shorthands, etc. Used by npm.",
  "devDependencies": {
    "tap": "^14.10.6"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
    "shasum": "530942bb58a512fccafe53fe210f13a25355dc88",
    "tarball": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
    "fileCount": 6,
    "unpackedSize": 25840,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfOjqHCRA9TVsSAnZWagAAru4P/1cRNObNIaZrhtlfAP2C\nPbMyT2IzO5MPiIvZyBvf3jW2JMzlEwKq9g5vLnA3ZdpYhtxVsr9SmKMj91RW\npmzbDYAIZpivc6bYpyMwOEMk+99/KI3+tLXpvkGmoahgFHAmUBZQOCpzgtks\nktksdHPMhQvj0BkEreVOO/+mTJl1MI/QmpR2XeikCMcsLnha89TcceCFL7St\nH1zYAX6RfhuScPQ6rv/3f88SN4iui2mTfDOvkgADr/1Ru9lfZWdV+XMAJxr8\n+Sih4rBrTcB9BLg8rjl5YQYpQdhICW3A+7D/4hWNHVPjBC5wxgZGwlshoi9k\nNXcnfQ3/OBa0WknJwvQnM0G9za+nV1jIa9cCUt7Q8o8ua0MOYuVXlSAkgH2o\n67uwmhBneWRmw4/T1liCbZVVnX+sKbHewmTjz8tk4Y1QGOdYBVaMxf4uxrC1\n9PYkU6eGleyMdaohz4E1Os6+X78glhdOk5nAJGRpSVksnZFafYcA8y0kGyGh\nm7kD3nXhS2KgZ+mBBl9w/i7j9nYtFWIRawAjrD8nEOde0he/QLt9uq+m6q9u\nsJBLMbY3JebKMy00jtEQ+BVLrm9SIho/84EqTvyxTSX3O9a4nStZA3rkT1Ea\n8hjSyAXj2fpFslc0+YBqPYUCAhGcZB8FUY+2NEgYw0TztMsIQnCFl3eliipl\nUfFu\r\n=CtCh\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "bin",
    "lib"
  ],
  "gitHead": "fee9d25fb8518cf202eb0bbdfa6e1c516ee8dff7",
  "homepage": "https://github.com/npm/nopt#readme",
  "license": "ISC",
  "main": "lib/nopt.js",
  "maintainers": [
    {
      "name": "adam_baldwin",
      "email": "evilpacket@gmail.com"
    },
    {
      "name": "claudiahdz",
      "email": "cghr1990@gmail.com"
    },
    {
      "name": "darcyclarke",
      "email": "darcy@darcyclarke.me"
    },
    {
      "name": "isaacs",
      "email": "i@izs.me"
    },
    {
      "name": "mylesborins",
      "email": "myles.borins@gmail.com"
    },
    {
      "name": "ruyadorno",
      "email": "ruyadorno@hotmail.com"
    }
  ],
  "name": "nopt",
  "optionalDependencies": {},
  "readme": "If you want to write an option parser, and have it be good, there are\ntwo ways to do it.  The Right Way, and the Wrong Way.\n\nThe Wrong Way is to sit down and write an option parser.  We've all done\nthat.\n\nThe Right Way is to write some complex configurable program with so many\noptions that you hit the limit of your frustration just trying to\nmanage them all, and defer it with duct-tape solutions until you see\nexactly to the core of the problem, and finally snap and write an\nawesome option parser.\n\nIf you want to write an option parser, don't write an option parser.\nWrite a package manager, or a source control system, or a service\nrestarter, or an operating system.  You probably won't end up with a\ngood one of those, but if you don't give up, and you are relentless and\ndiligent enough in your procrastination, you may just end up with a very\nnice option parser.\n\n## USAGE\n\n```javascript\n// my-program.js\nvar nopt = require(\"nopt\")\n  , Stream = require(\"stream\").Stream\n  , path = require(\"path\")\n  , knownOpts = { \"foo\" : [String, null]\n                , \"bar\" : [Stream, Number]\n                , \"baz\" : path\n                , \"bloo\" : [ \"big\", \"medium\", \"small\" ]\n                , \"flag\" : Boolean\n                , \"pick\" : Boolean\n                , \"many1\" : [String, Array]\n                , \"many2\" : [path, Array]\n                }\n  , shortHands = { \"foofoo\" : [\"--foo\", \"Mr. Foo\"]\n                 , \"b7\" : [\"--bar\", \"7\"]\n                 , \"m\" : [\"--bloo\", \"medium\"]\n                 , \"p\" : [\"--pick\"]\n                 , \"f\" : [\"--flag\"]\n                 }\n             // everything is optional.\n             // knownOpts and shorthands default to {}\n             // arg list defaults to process.argv\n             // slice defaults to 2\n  , parsed = nopt(knownOpts, shortHands, process.argv, 2)\nconsole.log(parsed)\n```\n\nThis would give you support for any of the following:\n\n```console\n$ node my-program.js --foo \"blerp\" --no-flag\n{ \"foo\" : \"blerp\", \"flag\" : false }\n\n$ node my-program.js ---bar 7 --foo \"Mr. Hand\" --flag\n{ bar: 7, foo: \"Mr. Hand\", flag: true }\n\n$ node my-program.js --foo \"blerp\" -f -----p\n{ foo: \"blerp\", flag: true, pick: true }\n\n$ node my-program.js -fp --foofoo\n{ foo: \"Mr. Foo\", flag: true, pick: true }\n\n$ node my-program.js --foofoo -- -fp  # -- stops the flag parsing.\n{ foo: \"Mr. Foo\", argv: { remain: [\"-fp\"] } }\n\n$ node my-program.js --blatzk -fp # unknown opts are ok.\n{ blatzk: true, flag: true, pick: true }\n\n$ node my-program.js --blatzk=1000 -fp # but you need to use = if they have a value\n{ blatzk: 1000, flag: true, pick: true }\n\n$ node my-program.js --no-blatzk -fp # unless they start with \"no-\"\n{ blatzk: false, flag: true, pick: true }\n\n$ node my-program.js --baz b/a/z # known paths are resolved.\n{ baz: \"/Users/isaacs/b/a/z\" }\n\n# if Array is one of the types, then it can take many\n# values, and will always be an array.  The other types provided\n# specify what types are allowed in the list.\n\n$ node my-program.js --many1 5 --many1 null --many1 foo\n{ many1: [\"5\", \"null\", \"foo\"] }\n\n$ node my-program.js --many2 foo --many2 bar\n{ many2: [\"/path/to/foo\", \"path/to/bar\"] }\n```\n\nRead the tests at the bottom of `lib/nopt.js` for more examples of\nwhat this puppy can do.\n\n## Types\n\nThe following types are supported, and defined on `nopt.typeDefs`\n\n* String: A normal string.  No parsing is done.\n* path: A file system path.  Gets resolved against cwd if not absolute.\n* url: A url.  If it doesn't parse, it isn't accepted.\n* Number: Must be numeric.\n* Date: Must parse as a date. If it does, and `Date` is one of the options,\n  then it will return a Date object, not a string.\n* Boolean: Must be either `true` or `false`.  If an option is a boolean,\n  then it does not need a value, and its presence will imply `true` as\n  the value.  To negate boolean flags, do `--no-whatever` or `--whatever\n  false`\n* NaN: Means that the option is strictly not allowed.  Any value will\n  fail.\n* Stream: An object matching the \"Stream\" class in node.  Valuable\n  for use when validating programmatically.  (npm uses this to let you\n  supply any WriteStream on the `outfd` and `logfd` config options.)\n* Array: If `Array` is specified as one of the types, then the value\n  will be parsed as a list of options.  This means that multiple values\n  can be specified, and that the value will always be an array.\n\nIf a type is an array of values not on this list, then those are\nconsidered valid values.  For instance, in the example above, the\n`--bloo` option can only be one of `\"big\"`, `\"medium\"`, or `\"small\"`,\nand any other value will be rejected.\n\nWhen parsing unknown fields, `\"true\"`, `\"false\"`, and `\"null\"` will be\ninterpreted as their JavaScript equivalents.\n\nYou can also mix types and values, or multiple types, in a list.  For\ninstance `{ blah: [Number, null] }` would allow a value to be set to\neither a Number or null.  When types are ordered, this implies a\npreference, and the first type that can be used to properly interpret\nthe value will be used.\n\nTo define a new type, add it to `nopt.typeDefs`.  Each item in that\nhash is an object with a `type` member and a `validate` method.  The\n`type` member is an object that matches what goes in the type list.  The\n`validate` method is a function that gets called with `validate(data,\nkey, val)`.  Validate methods should assign `data[key]` to the valid\nvalue of `val` if it can be handled properly, or return boolean\n`false` if it cannot.\n\nYou can also call `nopt.clean(data, types, typeDefs)` to clean up a\nconfig object and remove its invalid properties.\n\n## Error Handling\n\nBy default, nopt outputs a warning to standard error when invalid values for\nknown options are found.  You can change this behavior by assigning a method\nto `nopt.invalidHandler`.  This method will be called with\nthe offending `nopt.invalidHandler(key, val, types)`.\n\nIf no `nopt.invalidHandler` is assigned, then it will console.error\nits whining.  If it is assigned to boolean `false` then the warning is\nsuppressed.\n\n## Abbreviations\n\nYes, they are supported.  If you define options like this:\n\n```javascript\n{ \"foolhardyelephants\" : Boolean\n, \"pileofmonkeys\" : Boolean }\n```\n\nThen this will work:\n\n```bash\nnode program.js --foolhar --pil\nnode program.js --no-f --pileofmon\n# etc.\n```\n\n## Shorthands\n\nShorthands are a hash of shorter option names to a snippet of args that\nthey expand to.\n\nIf multiple one-character shorthands are all combined, and the\ncombination does not unambiguously match any other option or shorthand,\nthen they will be broken up into their constituent parts.  For example:\n\n```json\n{ \"s\" : [\"--loglevel\", \"silent\"]\n, \"g\" : \"--global\"\n, \"f\" : \"--force\"\n, \"p\" : \"--parseable\"\n, \"l\" : \"--long\"\n}\n```\n\n```bash\nnpm ls -sgflp\n# just like doing this:\nnpm ls --loglevel silent --global --force --long --parseable\n```\n\n## The Rest of the args\n\nThe config object returned by nopt is given a special member called\n`argv`, which is an object with the following fields:\n\n* `remain`: The remaining args after all the parsing has occurred.\n* `original`: The args as they originally appeared.\n* `cooked`: The args after flags and shorthands are expanded.\n\n## Slicing\n\nNode programs are called with more or less the exact argv as it appears\nin C land, after the v8 and node-specific options have been plucked off.\nAs such, `argv[0]` is always `node` and `argv[1]` is always the\nJavaScript program being run.\n\nThat's usually not very useful to you.  So they're sliced off by\ndefault.  If you want them, then you can pass in `0` as the last\nargument, or any other number that you'd like to slice off the start of\nthe list.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/nopt.git"
  },
  "scripts": {
    "postversion": "npm publish",
    "prepublishOnly": "git push origin --follow-tags",
    "preversion": "npm test",
    "test": "tap test/*.js"
  },
  "version": "5.0.0"
}
