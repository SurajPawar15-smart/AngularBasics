{
  "_args": [
    [
      {
        "raw": "css-minimizer-webpack-plugin@3.0.0",
        "scope": null,
        "escapedName": "css-minimizer-webpack-plugin",
        "name": "css-minimizer-webpack-plugin",
        "rawSpec": "3.0.0",
        "spec": "3.0.0",
        "type": "version"
      },
      "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular"
    ]
  ],
  "_from": "css-minimizer-webpack-plugin@3.0.0",
  "_hasShrinkwrap": false,
  "_id": "css-minimizer-webpack-plugin@3.0.0",
  "_location": "/css-minimizer-webpack-plugin",
  "_nodeVersion": "12.22.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/css-minimizer-webpack-plugin_3.0.0_1620834132316_0.9968782828730451"
  },
  "_npmUser": {
    "name": "evilebottnawi",
    "email": "sheo13666q@gmail.com"
  },
  "_npmVersion": "7.11.1",
  "_phantomChildren": {
    "@types/json-schema": "7.0.7",
    "ajv-keywords": "3.5.2",
    "fast-deep-equal": "3.1.3",
    "fast-json-stable-stringify": "2.1.0",
    "uri-js": "4.4.1",
    "yocto-queue": "0.1.0"
  },
  "_requested": {
    "raw": "css-minimizer-webpack-plugin@3.0.0",
    "scope": null,
    "escapedName": "css-minimizer-webpack-plugin",
    "name": "css-minimizer-webpack-plugin",
    "rawSpec": "3.0.0",
    "spec": "3.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/build-angular"
  ],
  "_resolved": "https://registry.npmjs.org/css-minimizer-webpack-plugin/-/css-minimizer-webpack-plugin-3.0.0.tgz",
  "_shasum": "5b1edbffe1a3e6450d8cb53fb4f4c5013b7af313",
  "_shrinkwrap": null,
  "_spec": "css-minimizer-webpack-plugin@3.0.0",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular",
  "author": {
    "name": "Loann Neveu"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/css-minimizer-webpack-plugin/issues"
  },
  "dependencies": {
    "cssnano": "^5.0.0",
    "jest-worker": "^26.3.0",
    "p-limit": "^3.0.2",
    "postcss": "^8.2.9",
    "schema-utils": "^3.0.0",
    "serialize-javascript": "^5.0.1",
    "source-map": "^0.6.1"
  },
  "description": "cssnano plugin for Webpack",
  "devDependencies": {
    "@babel/cli": "^7.13.16",
    "@babel/core": "^7.14.0",
    "@babel/preset-env": "^7.14.1",
    "@commitlint/cli": "^12.1.3",
    "@commitlint/config-conventional": "^12.1.3",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-jest": "^26.6.3",
    "clean-css": "^5.1.2",
    "copy-webpack-plugin": "^8.1.1",
    "cross-env": "^7.0.3",
    "css-loader": "^5.2.4",
    "cssnano-preset-simple": "^2.0.0",
    "csso": "^4.2.0",
    "del": "^6.0.0",
    "del-cli": "^3.0.1",
    "eslint": "^7.26.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-import": "^2.22.1",
    "husky": "^6.0.0",
    "jest": "^26.6.3",
    "lint-staged": "^11.0.0",
    "memfs": "^3.2.2",
    "mini-css-extract-plugin": "^1.6.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.3.0",
    "sass": "^1.32.12",
    "sass-loader": "^11.1.0",
    "standard-version": "^9.3.0",
    "sugarss": "^3.0.3",
    "webpack": "^5.37.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-yIrqG0pPphR1RoNx2wDxYmxRf2ubRChLDXxv7ccipEm5bRKsZRYp8n+2peeXehtTF5s3yNxlqsdz3WQOsAgUkw==",
    "shasum": "5b1edbffe1a3e6450d8cb53fb4f4c5013b7af313",
    "tarball": "https://registry.npmjs.org/css-minimizer-webpack-plugin/-/css-minimizer-webpack-plugin-3.0.0.tgz",
    "fileCount": 9,
    "unpackedSize": 41777,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgm/dUCRA9TVsSAnZWagAACYkP/RHUEFoqd3agS8jN+EQJ\nGHP+n/N3myN1o0qmqi7If4n51Pec83sFSAdgIvuRmMb0aMS+NHYeC+1qt9hv\n+Kl0VcKlSvXSuS3Fv1lYT2ebphDBe71MbVANsoROvCz9kuXoyQuA3DgUAvr8\nChL2IsShAZaHWXJMoa31uGLbJmaZR8xibn2Pte59gwytHmnqSVY0TlzCCFvL\nQYax8ZLtqibwFAsLP2w0z0BFU0xjtG2nE8qapLV0vHfrNvpicwwxVACJ7YlX\nRx5BNLWrrXDgq5srZA5pStY70nv8izF0v4DIUr4SWt+XA6A+gcoJ0MUUppe3\nJ7ZgyMQKgr+MC0bcJacsf+srnpZ+LaZrpIWK5tFLQ6L5um3CHz4DB3kDKIQH\nvNHrUwHKUryLplofwaydNZsL/UoVelK7wTfzx4F67RF6AqY1gCv2ENHiJKaB\n+IcjXn9CKkaEY8kvG9JvUKHXROdC+MKBL2Q9Ozs7dcZTlJuufn+Eks4zXQUg\n1PwaGtYE6SbU3yCvGe7KdI7TOfs+qyyr/Q7xJukrHzQ0XwSkAg1b5PAvriAH\ngO0ZVP4WHnGtL7BLKMO2Jno1FUs2HmeW1+0eJqzUxWPIMOYbc/GIJYQAKyum\nYvq8hE2e0yijGM527QfFENe/1xMeGR/uB1rEErUvvwLVzvgZPShasodBW9Ln\nUre3\r\n=y6mh\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 12.13.0"
  },
  "files": [
    "dist"
  ],
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/webpack"
  },
  "gitHead": "d881dbe1f948b7fbcd956c3e723fe3a550fffcb5",
  "homepage": "https://github.com/webpack-contrib/css-minimizer-webpack-plugin",
  "keywords": [
    "cssnano",
    "css",
    "webpack",
    "webpack-plugin",
    "minimize",
    "minimizer",
    "minify",
    "minifier",
    "optimize",
    "optimizer"
  ],
  "license": "MIT",
  "main": "dist/cjs.js",
  "maintainers": [
    {
      "name": "evilebottnawi",
      "email": "sheo13666q@gmail.com"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "michael-ciniawsky",
      "email": "michael.ciniawsky@gmail.com"
    },
    {
      "name": "d3viant0ne",
      "email": "wiens.joshua@gmail.com"
    }
  ],
  "name": "css-minimizer-webpack-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^5.0.0"
  },
  "peerDependenciesMeta": {
    "clean-css": {
      "optional": true
    },
    "csso": {
      "optional": true
    }
  },
  "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# css-minimizer-webpack-plugin\n\nThis plugin uses [cssnano](https://cssnano.co) to optimize and minify your CSS.\n\nJust like [optimize-css-assets-webpack-plugin](https://github.com/NMFR/optimize-css-assets-webpack-plugin) but more accurate with source maps and assets using query string, allows to cache and works in parallel mode.\n\n## Getting Started\n\nTo begin, you'll need to install `css-minimizer-webpack-plugin`:\n\n```console\n$ npm install css-minimizer-webpack-plugin --save-dev\n```\n\nThen add the plugin to your `webpack` configuration. For example:\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test: /.s?css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader'],\n      },\n    ],\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      // For webpack@5 you can use the `...` syntax to extend existing minimizers (i.e. `terser-webpack-plugin`), uncomment the next line\n      // `...`,\n      new CssMinimizerPlugin(),\n    ],\n  },\n};\n```\n\nThis will enable CSS optimization only in production mode.\nIf you want to run it also in development set the `optimization.minimize` option to `true`.\n\nAnd run `webpack` via your preferred method.\n\n## Note about source maps\n\n**Works only with `source-map`, `inline-source-map`, `hidden-source-map` and `nosources-source-map` values for the [`devtool`](https://webpack.js.org/configuration/devtool/) option.**\n\nWhy? Because CSS support only these source map types.\n\nThe plugin respect the [`devtool`](https://webpack.js.org/configuration/devtool/) and using the `SourceMapDevToolPlugin` plugin.\nUsing supported `devtool` values enable source map generation.\nUsing `SourceMapDevToolPlugin` with enabled the `columns` option enables source map generation.\n\nUse source maps to map error message locations to modules (this slows down the compilation).\nIf you use your own `minify` function please read the `minify` section for handling source maps correctly.\n\n## Options\n\n### `test`\n\nType: `String|RegExp|Array<String|RegExp>` - default: `/\\.css(\\?.*)?$/i`\n\nTest to match files against.\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        test: /\\.foo\\.css$/i,\n      }),\n    ],\n  },\n};\n```\n\n### `include`\n\nType: `String|RegExp|Array<String|RegExp>`\nDefault: `undefined`\n\nFiles to include.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        include: /\\/includes/,\n      }),\n    ],\n  },\n};\n```\n\n### `exclude`\n\nType: `String|RegExp|Array<String|RegExp>`\nDefault: `undefined`\n\nFiles to exclude.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        exclude: /\\/excludes/,\n      }),\n    ],\n  },\n};\n```\n\n### `parallel`\n\nType: `Boolean|Number`\nDefault: `true`\n\nUse multi-process parallel running to improve the build speed.\nDefault number of concurrent runs: `os.cpus().length - 1`.\n\n> ℹ️ Parallelization can speedup your build significantly and is therefore **highly recommended**.\n> If a parallelization is enabled, the packages in `minimizerOptions` must be required via strings (`packageName` or `require.resolve(packageName)`). Read more in [`minimizerOptions`](#minimizerOptions)\n\n#### `Boolean`\n\nEnable/disable multi-process parallel running.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        parallel: true,\n      }),\n    ],\n  },\n};\n```\n\n#### `Number`\n\nEnable multi-process parallel running and set number of concurrent runs.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        parallel: 4,\n      }),\n    ],\n  },\n};\n```\n\n### `minify`\n\nType: `Function|Array<Function>`\nDefault: `CssMinimizerPlugin.cssnanoMinify`\n\nAllows to override default minify function.\nBy default plugin uses [cssnano](https://github.com/cssnano/cssnano) package.\nUseful for using and testing unpublished versions or forks.\n\nPossible options:\n\n- CssMinimizerPlugin.cssnanoMinify\n- CssMinimizerPlugin.cssoMinify\n- CssMinimizerPlugin.cleanCssMinify\n- async (data, inputMap, minimizerOptions) => {return {code: `a{color: red}`, map: `...`, warnings: []}}\n\n> ⚠️ **Always use `require` inside `minify` function when `parallel` option enabled**.\n\n#### `Function`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        minimizerOptions: {\n          level: {\n            1: {\n              roundingPrecision: 'all=3,px=5',\n            },\n          },\n        },\n        minify: CssMinimizerPlugin.cleanCssMinify,\n      }),\n    ],\n  },\n};\n```\n\n#### `Array`\n\nIf an array of functions is passed to the `minify` option, the `minimizerOptions` must also be an array.\nThe function index in the `minify` array corresponds to the options object with the same index in the `minimizerOptions` array.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        minimizerOptions: [\n          {}, // Options for the first function (CssMinimizerPlugin.cssnanoMinify)\n          {}, // Options for the second function (CssMinimizerPlugin.cleanCssMinify)\n          {}, // Options for the third function\n        ],\n        minify: [\n          CssMinimizerPlugin.cssnanoMinify,\n          CssMinimizerPlugin.cleanCssMinify,\n          async (data, inputMap, minimizerOptions) => {\n            // To do something\n            return {\n              code: `a{color: red}`,\n              map: `{\"version\": \"3\", ...}`,\n              warnings: [],\n            };\n          },\n        ],\n      }),\n    ],\n  },\n};\n```\n\n### `minimizerOptions`\n\nType: `Object|Array<Object>`\nDefault: `{ preset: 'default' }`\n\nCssnano optimisations [options](https://cssnano.co/docs/optimisations).\n\n#### `Object`\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        minimizerOptions: {\n          preset: [\n            'default',\n            {\n              discardComments: { removeAll: true },\n            },\n          ],\n        },\n      }),\n    ],\n  },\n};\n```\n\n#### `Array`\n\nThe function index in the `minify` array corresponds to the options object with the same index in the `minimizerOptions` array.\nIf you use `minimizerOptions` like object, all `minify` function accept it.\n\n> If a parallelization is enabled, the packages in `minimizerOptions` must be required via strings (`packageName` or `require.resolve(packageName)`). In this case, we shouldn't use `require`/`import`.\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        minimizerOptions: {\n          preset: require.resolve('cssnano-preset-simple'),\n        },\n      }),\n    ],\n  },\n};\n```\n\n#### `processorOptions`\n\nType: `Object`\nDefault: `{ to: assetName, from: assetName }`\n\nAllows to specify options [`processoptions`](https://postcss.org/api/#processoptions) for the cssnano.\nThe `parser`,` stringifier` and `syntax` can be either a function or a string indicating the module that will be imported.\n\n> ⚠️ **If a function is passed, the `parallel` option must be disabled.**.\n\n```js\nimport sugarss from 'sugarss';\n\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        parallel: false,\n        minimizerOptions: {\n          processorOptions: {\n            parser: sugarss,\n          },\n        },\n      }),\n    ],\n  },\n};\n```\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        minimizerOptions: {\n          processorOptions: {\n            parser: 'sugarss',\n          },\n        },\n      }),\n    ],\n  },\n};\n```\n\n### `warningsFilter`\n\nType: `Function<(warning, file, source) -> Boolean>`\nDefault: `() => true`\n\nAllow to filter css-minimizer warnings (By default [cssnano](https://github.com/cssnano/cssnano)).\nReturn `true` to keep the warning, a falsy value (`false`/`null`/`undefined`) otherwise.\n\n> ⚠️ The `source` argument will contain `undefined` if you don't use source maps.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        warningsFilter: (warning, file, source) => {\n          if (/Dropping unreachable code/i.test(warning)) {\n            return true;\n          }\n\n          if (/file\\.css/i.test(file)) {\n            return true;\n          }\n\n          if (/source\\.css/i.test(source)) {\n            return true;\n          }\n\n          return false;\n        },\n      }),\n    ],\n  },\n};\n```\n\n## Examples\n\n### Use sourcemaps\n\nDon't forget to enable `sourceMap` options for all loaders.\n\n```js\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n\nmodule.exports = {\n  devtool: 'source-map',\n  module: {\n    loaders: [\n      {\n        test: /.s?css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          { loader: 'css-loader', options: { sourceMap: true } },\n          { loader: 'sass-loader', options: { sourceMap: true } },\n        ],\n      },\n    ],\n  },\n  optimization: {\n    minimizer: [new CssMinimizerPlugin()],\n  },\n};\n```\n\n### Remove all comments\n\nRemove all comments (including comments starting with `/*!`).\n\n```js\nmodule.exports = {\n  optimization: {\n    minimizer: [\n      new CssMinimizerPlugin({\n        minimizerOptions: {\n          preset: [\n            'default',\n            {\n              discardComments: { removeAll: true },\n            },\n          ],\n        },\n      }),\n    ],\n  },\n};\n```\n\n### Using custom minifier [csso](https://github.com/css/csso)\n\nBy default plugin uses [cssnano](https://github.com/cssnano/cssnano) package.\nIt is possible to use another minify function.\n\n> ⚠️ **Always use `require` inside `minify` function when `parallel` option enabled**.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  devtool: 'source-map',\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        minify: async (data, inputMap) => {\n          const csso = require('csso');\n          const sourcemap = require('source-map');\n\n          const [[filename, input]] = Object.entries(data);\n          const minifiedCss = csso.minify(input, {\n            filename: filename,\n            sourceMap: true,\n          });\n\n          if (inputMap) {\n            minifiedCss.map.applySourceMap(\n              new sourcemap.SourceMapConsumer(inputMap),\n              filename\n            );\n          }\n\n          return {\n            code: minifiedCss.css,\n            map: minifiedCss.map.toJSON(),\n          };\n        },\n      }),\n    ],\n  },\n};\n```\n\n### Using custom minifier [clean-css](https://github.com/jakubpawlowicz/clean-css)\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  devtool: 'source-map',\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        minify: CssMinimizerPlugin.cleanCssMinify,\n        // Uncomment this line for options\n        // minimizerOptions: { compatibility: 'ie11,-properties.merging' },\n      }),\n    ],\n  },\n};\n```\n\n### Using custom minifier [csso](https://github.com/css/csso)\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  devtool: 'source-map',\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new CssMinimizerPlugin({\n        minify: CssMinimizerPlugin.cssoMinify,\n        // Uncomment this line for options\n        // minimizerOptions: { restructure: false },\n      }),\n    ],\n  },\n};\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/css-minimizer-webpack-plugin.svg\n[npm-url]: https://npmjs.com/package/css-minimizer-webpack-plugin\n[node]: https://img.shields.io/node/v/css-minimizer-webpack-plugin.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/css-minimizer-webpack-plugin.svg\n[deps-url]: https://david-dm.org/webpack-contrib/css-minimizer-webpack-plugin\n[tests]: https://github.com/webpack-contrib/css-minimizer-webpack-plugin/workflows/css-minimizer-webpack-plugin/badge.svg\n[tests-url]: https://github.com/webpack-contrib/css-minimizer-webpack-plugin/actions\n[cover]: https://codecov.io/gh/webpack-contrib/css-minimizer-webpack-plugin/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/css-minimizer-webpack-plugin\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=css-minimizer-webpack-plugin\n[size-url]: https://packagephobia.now.sh/result?p=css-minimizer-webpack-plugin\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/css-minimizer-webpack-plugin.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
    "clean": "del-cli dist",
    "commitlint": "commitlint --from=master",
    "lint": "npm-run-all -l -p \"lint:**\"",
    "lint:js": "eslint --cache .",
    "lint:prettier": "prettier \"{**/*,*}.{js,json,md,yml,css,ts}\" --list-different",
    "prebuild": "npm run clean",
    "prepare": "husky install && npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "npm run test:coverage",
    "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
    "test:only": "cross-env NODE_ENV=test jest",
    "test:watch": "npm run test:only -- --watch"
  },
  "version": "3.0.0"
}
