{
  "_args": [
    [
      {
        "raw": "npm-pick-manifest@6.1.1",
        "scope": null,
        "escapedName": "npm-pick-manifest",
        "name": "npm-pick-manifest",
        "rawSpec": "6.1.1",
        "spec": "6.1.1",
        "type": "version"
      },
      "c:\\Angular\\TaskManager\\node_modules\\@angular\\cli"
    ]
  ],
  "_from": "npm-pick-manifest@6.1.1",
  "_hasShrinkwrap": false,
  "_id": "npm-pick-manifest@6.1.1",
  "_location": "/npm-pick-manifest",
  "_nodeVersion": "16.0.0-pre",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/npm-pick-manifest_6.1.1_1616094236396_0.7589151714743336"
  },
  "_npmUser": {
    "name": "ruyadorno",
    "email": "ruyadorno@hotmail.com"
  },
  "_npmVersion": "7.6.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "npm-pick-manifest@6.1.1",
    "scope": null,
    "escapedName": "npm-pick-manifest",
    "name": "npm-pick-manifest",
    "rawSpec": "6.1.1",
    "spec": "6.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular/cli",
    "/@npmcli/git",
    "/pacote"
  ],
  "_resolved": "https://registry.npmjs.org/npm-pick-manifest/-/npm-pick-manifest-6.1.1.tgz",
  "_shasum": "7b5484ca2c908565f43b7f27644f36bb816f5148",
  "_shrinkwrap": null,
  "_spec": "npm-pick-manifest@6.1.1",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\@angular\\cli",
  "author": {
    "name": "Kat MarchÃ¡n",
    "email": "kzm@sykosomatic.org"
  },
  "bugs": {
    "url": "https://github.com/npm/npm-pick-manifest/issues"
  },
  "dependencies": {
    "npm-install-checks": "^4.0.0",
    "npm-normalize-package-bin": "^1.0.1",
    "npm-package-arg": "^8.1.2",
    "semver": "^7.3.4"
  },
  "description": "Resolves a matching manifest from a package metadata document according to standard npm semver resolution rules.",
  "devDependencies": {
    "standard": "^14.3.1",
    "tap": "^14.11.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-dBsdBtORT84S8V8UTad1WlUyKIY9iMsAmqxHbLdeEeBNMLQDlDWWra3wYUx9EBEIiG/YwAy0XyNHDd2goAsfuA==",
    "shasum": "7b5484ca2c908565f43b7f27644f36bb816f5148",
    "tarball": "https://registry.npmjs.org/npm-pick-manifest/-/npm-pick-manifest-6.1.1.tgz",
    "fileCount": 5,
    "unpackedSize": 22587,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgU6QcCRA9TVsSAnZWagAAvzEP/jsMQc9K4S68CMPeWagc\nTBz96E0duRhsWCd9wsqQjMfTsMyTr1x9TtVXI/IF05vNCskfQ3X9+0+XHL0G\njVgwF6qIlgXYPXhtapWYFDJmUQDr84x1VC0XWpCxfajQgd2yVMa6E4SO/mNO\nmfFSQMMK+MBlkcycRZq8lVWIABpjAfvd5Y/SIgVWuyZanSokQhvlK3e9JqW4\njAdEq/kYzkuTFWm+31BLzdBYflRsN6rDHg2MK2B15InnLMGD+RZbE995xP14\nGEeGMohSxdwLa/mpHczbbmYytAydX5b7MGxSuSls0pJQdNP258tTFotq/zeG\n2DTrhMn4F/uDF5QselgNptWobP9fBRpgh59809wedUXdJuRBsxY/IIlnXedm\n1L5u9X2t9g47gZhhVdzvWKr1+VBq0qDBRVVQOde4VgHX537Ayo80g9ED6tBN\nICifa7cl/bUQ0vH4RlaqtRg9/FrVG/CqLxL3R3obZXWTU9xB2NrETzjZ25ir\n7Q/s23N7/teqlymwGXlxB/eCAAS03eRmIB1uv0nWn3iRis76uInUf7KFDbcb\ntGOURJCCNAslf3AnFF1km4LL68QifLtCwvN3XkSIwCcVfiSnvUL+RCnQlTnr\n7lNSXgL3a5R0DW9KYdvtsml6C7gOAEjRkzMdh7gSIoaEnilCRjbU4m5Q5hUS\nTCco\r\n=13hW\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "*.js"
  ],
  "gitHead": "6d0a36e0c8d65754ffbc2dcf7e44c81068640eb2",
  "homepage": "https://github.com/npm/npm-pick-manifest#readme",
  "keywords": [
    "npm",
    "semver",
    "package manager"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "gar",
      "email": "gar+npm@danger.computer"
    },
    {
      "name": "isaacs",
      "email": "i@izs.me"
    },
    {
      "name": "darcyclarke",
      "email": "darcy@darcyclarke.me"
    },
    {
      "name": "ruyadorno",
      "email": "ruyadorno@hotmail.com"
    },
    {
      "name": "nlf",
      "email": "quitlahok@gmail.com"
    }
  ],
  "name": "npm-pick-manifest",
  "optionalDependencies": {},
  "readme": "# npm-pick-manifest [![npm version](https://img.shields.io/npm/v/npm-pick-manifest.svg)](https://npm.im/npm-pick-manifest) [![license](https://img.shields.io/npm/l/npm-pick-manifest.svg)](https://npm.im/npm-pick-manifest) [![Travis](https://img.shields.io/travis/npm/npm-pick-manifest.svg)](https://travis-ci.org/npm/npm-pick-manifest) [![Coverage Status](https://coveralls.io/repos/github/npm/npm-pick-manifest/badge.svg?branch=latest)](https://coveralls.io/github/npm/npm-pick-manifest?branch=latest)\n\n[`npm-pick-manifest`](https://github.com/npm/npm-pick-manifest) is a standalone\nimplementation of [npm](https://npmjs.com)'s semver range resolution algorithm.\n\n## Install\n\n`$ npm install --save npm-pick-manifest`\n\n## Table of Contents\n\n* [Example](#example)\n* [Features](#features)\n* [API](#api)\n  * [`pickManifest()`](#pick-manifest)\n\n### Example\n\n```javascript\nconst pickManifest = require('npm-pick-manifest')\n\nfetch('https://registry.npmjs.org/npm-pick-manifest').then(res => {\n  return res.json()\n}).then(packument => {\n  return pickManifest(packument, '^1.0.0')\n}) // get same manifest as npm would get if you `npm i npm-pick-manifest@^1.0.0`\n```\n\n### Features\n\n* Uses npm's exact [semver resolution algorithm](http://npm.im/semver).\n* Supports ranges, tags, and versions.\n* Prefers non-deprecated versions to deprecated versions.\n* Prefers versions whose `engines` requirements are satisfied over those\n  that will raise a warning or error at install time.\n\n### API\n\n#### <a name=\"pick-manifest\"></a> `> pickManifest(packument, selector, [opts]) -> manifest`\n\nReturns the manifest that best matches `selector`, or throws an error.\n\nPackuments are anything returned by metadata URLs from the npm registry. That\nis, they're objects with the following shape (only fields used by\n`npm-pick-manifest` included):\n\n```javascript\n{\n  name: 'some-package',\n  'dist-tags': {\n    foo: '1.0.1'\n  },\n  versions: {\n    '1.0.0': { version: '1.0.0' },\n    '1.0.1': { version: '1.0.1' },\n    '1.0.2': { version: '1.0.2' },\n    '2.0.0': { version: '2.0.0' }\n  }\n}\n```\n\nThe algorithm will follow npm's algorithm for semver resolution, and only\n`tag`, `range`, and `version` selectors are supported.\n\nThe function will throw `ETARGET` if there was no matching manifest, and\n`ENOVERSIONS` if the packument object has no valid versions in `versions`.\nIf the only matching manifest is included in a `policyRestrictions` section\nof the packument, then an `E403` is raised.\n\n#### <a name=\"pick-manifest-options\"></a> Options\n\nAll options are optional.\n\n* `includeStaged` - Boolean, default `false`.  Include manifests in the\n  `stagedVersions.versions` set, to support installing [staged\n  packages](https://github.com/npm/rfcs/pull/92) when appropriate.  Note\n  that staged packages are always treated as lower priority than actual\n  publishes, even when `includeStaged` is set.\n* `defaultTag` - String, default `'latest'`.  The default `dist-tag` to\n  install when no specifier is provided.  Note that the version indicated\n  by this specifier will be given top priority if it matches a supplied\n  semver range.\n* `before` - String, Date, or Number, default `null`. This is passed to\n  `new Date()`, so anything that works there will be valid.  Do not\n  consider _any_ manifests that were published after the date indicated.\n  Note that this is only relevant when the packument includes a `time`\n  field listing the publish date of all the packages.\n* `nodeVersion` - String, default `process.version`.  The Node.js version\n  to use when checking manifests for `engines` requirement satisfaction.\n* `npmVersion` - String, default `null`.  The npm version to use when\n  checking manifest for `engines` requirement satisfaction.  (If `null`,\n  then this particular check is skipped.)\n* `avoid` - String, default `null`.  A SemVer range of\n  versions that should be avoided.  An avoided version MAY be selected if\n  there is no other option, so when using this for version selection ensure\n  that you check the result against the range to see if there was no\n  alternative available.\n* `avoidStrict` Boolean, default `false`.  If set to true, then\n  `pickManifest` will never return a version in the `avoid` range.  If the\n  only available version in the `wanted` range is a version that should be\n  avoided, then it will return a version _outside_ the `wanted` range,\n  preferring to do so without making a SemVer-major jump, if possible.  If\n  there are no versions outside the `avoid` range, then throw an\n  `ETARGET` error.  It does this by calling pickManifest first with the\n  `wanted` range, then with a `^` affixed to the version returned by the\n  `wanted` range, and then with a `*` version range, and throwing if\n  nothing could be found to satisfy the avoidance request.\n\nReturn value is the manifest as it exists in the packument, possibly\ndecorated with the following boolean flags:\n\n* `_shouldAvoid` The version is in the `avoid` range.  Watch out!\n* `_outsideDependencyRange` The version is outside the `wanted` range,\n  because `avoidStrict: true` was set.\n* `_isSemVerMajor` The `_outsideDependencyRange` result is a SemVer-major\n  step up from the version returned by the `wanted` range.\n\n### Algorithm\n\n1. Create list of all versions in `versions`,\n   `policyRestrictions.versions`, and (if `includeStaged` is set)\n   `stagedVersions.versions`.\n2. If a `dist-tag` is requested,\n    1. If the manifest is not after the specified `before` date, then\n       select that from the set.\n    2. If the manifest is after the specified `before` date, then re-start\n       the selection looking for the highest SemVer range that is equal to\n       or less than the `dist-tag` target.\n3. If a specific version is requested,\n    1. If the manifest is not after the specified `before` date, then\n       select the specified manifest.\n    2. If the manifest is after the specified `before` date, then raise\n       `ETARGET` error.  (NB: this is a breaking change from v5, where a\n       specified version would override the `before` setting.)\n4. (At this point we know a range is requested.)\n5. If the `defaultTag` refers to a `dist-tag` that satisfies the range (or\n   if the range is `'*'` or `''`), and the manifest is published before the\n   `before` setting, then select that manifest.\n6. If nothing is yet selected, sort by the following heuristics in order,\n   and select the top item:\n    1. Prioritize versions that are not in the `avoid` range over those\n       that are.\n    2. Prioritize versions that are not in `policyRestrictions` over those\n       that are.\n    3. Prioritize published versions over staged versions.\n    4. Prioritize versions that are not deprecated, and which have a\n       satisfied engines requirement, over those that are either deprecated\n       or have an engines mismatch.\n    5. Prioritize versions that have a satisfied engines requirement over\n       those that do not.\n    6. Prioritize versions that are not are not deprecated (but have a\n       mismatched engines requirement) over those that are deprecated.\n    7. Prioritize higher SemVer precedence over lower SemVer precedence.\n7. If no manifest was selected, raise an `ETARGET` error.\n8. If the selected item is in the `policyRestrictions.versions` list, raise\n   an `E403` error.\n9. Return the selected manifest.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/npm-pick-manifest.git"
  },
  "scripts": {
    "coverage": "tap",
    "lint": "standard",
    "posttest": "npm run lint",
    "postversion": "npm publish",
    "prepublishOnly": "git push origin --follow-tags",
    "preversion": "npm test",
    "test": "tap"
  },
  "tap": {
    "check-coverage": true
  },
  "version": "6.1.1"
}
