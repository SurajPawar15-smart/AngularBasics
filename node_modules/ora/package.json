{
  "_args": [
    [
      {
        "raw": "ora@5.4.0",
        "scope": null,
        "escapedName": "ora",
        "name": "ora",
        "rawSpec": "5.4.0",
        "spec": "5.4.0",
        "type": "version"
      },
      "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular"
    ]
  ],
  "_from": "ora@5.4.0",
  "_hasShrinkwrap": false,
  "_id": "ora@5.4.0",
  "_location": "/ora",
  "_nodeVersion": "10.22.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ora_5.4.0_1615981758615_0.5191482313303699"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "6.14.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ora@5.4.0",
    "scope": null,
    "escapedName": "ora",
    "name": "ora",
    "rawSpec": "5.4.0",
    "spec": "5.4.0",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/build-angular",
    "/@angular-devkit/schematics",
    "/@angular/cli"
  ],
  "_resolved": "https://registry.npmjs.org/ora/-/ora-5.4.0.tgz",
  "_shasum": "42eda4855835b9cd14d33864c97a3c95a3f56bf4",
  "_shrinkwrap": null,
  "_spec": "ora@5.4.0",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "https://sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/ora/issues"
  },
  "dependencies": {
    "bl": "^4.1.0",
    "chalk": "^4.1.0",
    "cli-cursor": "^3.1.0",
    "cli-spinners": "^2.5.0",
    "is-interactive": "^1.0.0",
    "is-unicode-supported": "^0.1.0",
    "log-symbols": "^4.1.0",
    "strip-ansi": "^6.0.0",
    "wcwidth": "^1.0.1"
  },
  "description": "Elegant terminal spinner",
  "devDependencies": {
    "@types/node": "^14.14.35",
    "ava": "^2.4.0",
    "get-stream": "^6.0.0",
    "tsd": "^0.14.0",
    "xo": "^0.38.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-1StwyXQGoU6gdjYkyVcqOLnVlbKj+6yPNNOxJVgpt9t4eksKjiriiHuxktLYkgllwk+D6MbC4ihH84L1udRXPg==",
    "shasum": "42eda4855835b9cd14d33864c97a3c95a3f56bf4",
    "tarball": "https://registry.npmjs.org/ora/-/ora-5.4.0.tgz",
    "fileCount": 5,
    "unpackedSize": 23252,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgUey/CRA9TVsSAnZWagAAPxoP/3ZPKsbTGjZjsNKVxumg\nZdDOkMtKV4/2Rpn4Ag0Hsm49PmFNJvZiZDNpuggGlaldBM2dQddfeeHIyR7I\nfVf2gvrEyckiL8IUtFIYiUoNHxDHUl/1RhG7tZAg6XmBdabm9SBPeHMqn798\nozEtpstSUKWf5gxBm/iae8Zlex/L6oXtVhxhAC8Gl7kcgqMSHCFJQK4VNHZq\nvgebj1J2gqPNKoaVWrWXQgCi6FdUH4Qs1tnBWf/J25nusjHHTarHFHYYsYyE\nrTCHUBFDL0poo1pYbKVNTFq1dj/fr69PXF8C9GcJRAeK4hYio24xeJ97D8zo\nVriZWo75j1BLPLjHxTQLMSKnQsJei1RXI6EF9wKD3/nQeIGkMWqpbOPLktCX\nMSUQ6GBNSYviF0DhFEobqco0x2VwgN+luhtFp8D3ZNrHw4a7g6Y6efMIND8C\nIo+0AwZsDgS3TqWYAQhhA4M1sTGqXiLhFNJTl0Mhh1tLELzgDP2VhDey6JgY\niBovEMEFWzE4fBbuWMumfRMgMhmT5g1myKDidP/tM4vbO/flVdPtzu7+wEAn\nIXW6S4W6LSmpZgLIcWHlm4dFVFpFOfVjmkvyK+tjI/0ohAPTK2cUUE1SuV9f\nz0xaxI8PFH2QOUL2qbhHbKS17DZRDz9drvUegpG4begzT39wEKNmdAmAQQQS\nViVg\r\n=8WhY\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=10"
  },
  "files": [
    "index.js",
    "index.d.ts"
  ],
  "funding": "https://github.com/sponsors/sindresorhus",
  "gitHead": "c7d6dba4a723cfa640e6adb716cb6b5dad2c22d2",
  "homepage": "https://github.com/sindresorhus/ora#readme",
  "keywords": [
    "cli",
    "spinner",
    "spinners",
    "terminal",
    "term",
    "console",
    "ascii",
    "unicode",
    "loading",
    "indicator",
    "progress",
    "busy",
    "wait",
    "idle"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "ora",
  "optionalDependencies": {},
  "readme": "# ora\n\n> Elegant terminal spinner\n\n<p align=\"center\">\n\t<br>\n\t<img src=\"screenshot.svg\" width=\"500\">\n\t<br>\n</p>\n\n## Install\n\n```\n$ npm install ora\n```\n\n## Usage\n\n```js\nconst ora = require('ora');\n\nconst spinner = ora('Loading unicorns').start();\n\nsetTimeout(() => {\n\tspinner.color = 'yellow';\n\tspinner.text = 'Loading rainbows';\n}, 1000);\n```\n\n## API\n\n### ora(text)\n### ora(options)\n\nIf a string is provided, it is treated as a shortcut for [`options.text`](#text).\n\n#### options\n\nType: `object`\n\n##### text\n\nType: `string`\n\nText to display after the spinner.\n\n##### prefixText\n\nType: `string | () => string`\n\nText or a function that returns text to display before the spinner. No prefix text will be displayed if set to an empty string.\n\n##### spinner\n\nType: `string | object`\\\nDefault: `'dots'` <img src=\"screenshot-spinner.gif\" width=\"14\">\n\nName of one of the [provided spinners](https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json). See `example.js` in this repo if you want to test out different spinners. On Windows, it will always use the `line` spinner as the Windows command-line doesn't have proper Unicode support.\n\nOr an object like:\n\n```js\n{\n\tinterval: 80, // Optional\n\tframes: ['-', '+', '-']\n}\n```\n\n##### color\n\nType: `string`\\\nDefault: `'cyan'`\\\nValues: `'black' | 'red' | 'green' | 'yellow' | 'blue' | 'magenta' | 'cyan' | 'white' | 'gray'`\n\nColor of the spinner.\n\n##### hideCursor\n\nType: `boolean`\\\nDefault: `true`\n\nSet to `false` to stop Ora from hiding the cursor.\n\n##### indent\n\nType: `number`\\\nDefault: `0`\n\nIndent the spinner with the given number of spaces.\n\n##### interval\n\nType: `number`\\\nDefault: Provided by the spinner or `100`\n\nInterval between each frame.\n\nSpinners provide their own recommended interval, so you don't really need to specify this.\n\n##### stream\n\nType: `stream.Writable`\\\nDefault: `process.stderr`\n\nStream to write the output.\n\nYou could for example set this to `process.stdout` instead.\n\n##### isEnabled\n\nType: `boolean`\n\nForce enable/disable the spinner. If not specified, the spinner will be enabled if the `stream` is being run inside a TTY context (not spawned or piped) and/or not in a CI environment.\n\nNote that `{isEnabled: false}` doesn't mean it won't output anything. It just means it won't output the spinner, colors, and other ansi escape codes. It will still log text.\n\n##### isSilent\n\nType: `boolean`\\\nDefault: `false`\n\nDisable the spinner and all log text. All output is suppressed and `isEnabled` will be considered `false`.\n\n##### discardStdin\n\nType: `boolean`\\\nDefault: `true`\n\nDiscard stdin input (except Ctrl+C) while running if it's TTY. This prevents the spinner from twitching on input, outputting broken lines on <kbd>Enter</kbd> key presses, and prevents buffering of input while the spinner is running.\n\nThis has no effect on Windows as there's no good way to implement discarding stdin properly there.\n\n### Instance\n\n#### .start(text?)\n\nStart the spinner. Returns the instance. Set the current text if `text` is provided.\n\n#### .stop()\n\nStop and clear the spinner. Returns the instance.\n\n#### .succeed(text?)\n\nStop the spinner, change it to a green `✔` and persist the current text, or `text` if provided. Returns the instance. See the GIF below.\n\n#### .fail(text?)\n\nStop the spinner, change it to a red `✖` and persist the current text, or `text` if provided. Returns the instance. See the GIF below.\n\n#### .warn(text?)\n\nStop the spinner, change it to a yellow `⚠` and persist the current text, or `text` if provided. Returns the instance.\n\n#### .info(text?)\n\nStop the spinner, change it to a blue `ℹ` and persist the current text, or `text` if provided. Returns the instance.\n\n#### .isSpinning\n\nA boolean of whether the instance is currently spinning.\n\n#### .stopAndPersist(options?)\n\nStop the spinner and change the symbol or text. Returns the instance. See the GIF below.\n\n##### options\n\nType: `object`\n\n###### symbol\n\nType: `string`\\\nDefault: `' '`\n\nSymbol to replace the spinner with.\n\n###### text\n\nType: `string`\\\nDefault: Current `'text'`\n\nText to be persisted after the symbol\n\n###### prefixText\n\nType: `string`\\\nDefault: Current `prefixText`\n\nText to be persisted before the symbol. No prefix text will be displayed if set to an empty string.\n\n<img src=\"screenshot-2.gif\" width=\"480\">\n\n#### .clear()\n\nClear the spinner. Returns the instance.\n\n#### .render()\n\nManually render a new frame. Returns the instance.\n\n#### .frame()\n\nGet a new frame.\n\n#### .text\n\nChange the text after the spinner.\n\n#### .prefixText\n\nChange the text before the spinner. No prefix text will be displayed if set to an empty string.\n\n#### .color\n\nChange the spinner color.\n\n#### .spinner\n\nChange the spinner.\n\n#### .indent\n\nChange the spinner indent.\n\n### ora.promise(action, text)\n### ora.promise(action, options)\n\nStarts a spinner for a promise. The spinner is stopped with `.succeed()` if the promise fulfills or with `.fail()` if it rejects. Returns the spinner instance.\n\n#### action\n\nType: `Promise`\n\n## FAQ\n\n### How do I change the color of the text?\n\nUse [Chalk](https://github.com/chalk/chalk):\n\n```js\nconst ora = require('ora');\nconst chalk = require('chalk');\n\nconst spinner = ora(`Loading ${chalk.red('unicorns')}`).start();\n```\n\n### Why does the spinner freeze?\n\nJavaScript is single-threaded, so synchronous operations blocks the thread, including the spinner animation. Prefer asynchronous operations whenever possible.\n\n## Related\n\n- [cli-spinners](https://github.com/sindresorhus/cli-spinners) - Spinners for use in the terminal\n- [listr](https://github.com/SamVerschueren/listr) - Terminal task list\n- [CLISpinner](https://github.com/kiliankoe/CLISpinner) - Terminal spinner library for Swift\n- [halo](https://github.com/ManrajGrover/halo) - Python port\n- [spinners](https://github.com/FGRibreau/spinners) - Terminal spinners for Rust\n- [marquee-ora](https://github.com/joeycozza/marquee-ora) - Scrolling marquee spinner for Ora\n- [briandowns/spinner](https://github.com/briandowns/spinner) - Terminal spinner/progress indicator for Go\n- [tj/go-spin](https://github.com/tj/go-spin) - Terminal spinner package for Go\n- [observablehq.com/@victordidenko/ora](https://observablehq.com/@victordidenko/ora) - Ora port to Observable notebooks\n- [spinnies](https://github.com/jcarpanelli/spinnies) - Terminal multi-spinner library for Node.js\n- [kia](https://github.com/HarryPeach/kia) - Simple terminal spinners for Deno 🦕\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/ora.git"
  },
  "scripts": {
    "test": "xo && ava && tsd"
  },
  "version": "5.4.0"
}
