{
  "_args": [
    [
      {
        "raw": "mem@^8.0.0",
        "scope": null,
        "escapedName": "mem",
        "name": "mem",
        "rawSpec": "^8.0.0",
        "spec": ">=8.0.0 <9.0.0",
        "type": "range"
      },
      "c:\\Angular\\TaskManager\\node_modules\\webpack-dev-middleware"
    ]
  ],
  "_from": "mem@^8.0.0",
  "_hasShrinkwrap": false,
  "_id": "mem@8.1.1",
  "_location": "/mem",
  "_nodeVersion": "12.20.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mem_8.1.1_1618933747284_0.1715317913055432"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "6.14.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mem@^8.0.0",
    "scope": null,
    "escapedName": "mem",
    "name": "mem",
    "rawSpec": "^8.0.0",
    "spec": ">=8.0.0 <9.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webpack-dev-middleware"
  ],
  "_resolved": "https://registry.npmjs.org/mem/-/mem-8.1.1.tgz",
  "_shasum": "cf118b357c65ab7b7e0817bdf00c8062297c0122",
  "_shrinkwrap": null,
  "_spec": "mem@^8.0.0",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\webpack-dev-middleware",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "https://sindresorhus.com"
  },
  "ava": {
    "files": [
      "test.ts"
    ],
    "timeout": "1m",
    "typescript": {
      "rewritePaths": {
        "./": "dist/"
      }
    }
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/mem/issues"
  },
  "dependencies": {
    "map-age-cleaner": "^0.1.3",
    "mimic-fn": "^3.1.0"
  },
  "description": "Memoize functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input",
  "devDependencies": {
    "@ava/typescript": "^1.1.1",
    "@sindresorhus/tsconfig": "^0.7.0",
    "@types/serialize-javascript": "^4.0.0",
    "ava": "^3.15.0",
    "del-cli": "^3.0.1",
    "delay": "^4.4.0",
    "serialize-javascript": "^5.0.1",
    "tsd": "^0.13.1",
    "typescript": "^4.0.3",
    "xo": "^0.38.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-qFCFUDs7U3b8mBDPyz5EToEKoAkgCzqquIgi9nkkR9bixxOVOre+09lbuH7+9Kn2NFpm56M3GUWVbU2hQgdACA==",
    "shasum": "cf118b357c65ab7b7e0817bdf00c8062297c0122",
    "tarball": "https://registry.npmjs.org/mem/-/mem-8.1.1.tgz",
    "fileCount": 5,
    "unpackedSize": 17509,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgfvfzCRA9TVsSAnZWagAAG7YQAIxKwXR7pa7/W0tQCMGc\nOYdRtYPIf02h/s9rSHjppLYnhC/cebtqwywS8FRrlK6wC5un6rWhyc2bcPgf\nKTUemOqiNRkZuGOAeJ6yRvQK/o0ogDK0sShpdBakAc+QAhKfN240b0mBGti/\nyFRZcRD2CidDsgVKU0AL1LTrWkTwgDQmCs1SgMHzNK+I2pVafSNtK9VQwaMl\nSr+0GAg3ISXZXHMRv5jwHyhFLS6SFojBILz+XUwci7XF8GVCuDhKx5AT+iUv\ncjeDoO0nCWg8P17IW6H2pz4TJsZnXM1no/3wh3+lf3tWCq2n0DB6FeknjRA9\nbcefIufEklMji1EhNYiDc3XE74GmC4Bth5vCSiHEktoWuEfJiwMXFzEW843q\nK9ghfwfOzu1bx9V5//r4oOP+QSZ9TIEnj4W1LFuFVrLKB1f8I4wHsojQ2WDH\nuZZQUcAcPYfu86PR2U3QAjlGCxbEn628xIEou4tDCXTLdNHffd72ihO2NrZu\n+XuaHhgTtE/m109O0R15G7bpWNj+0XLMbEXdtQFsKam5wvccTEtCcaTVXq0w\nbuD3LH2u64C0dBmZ8/F4QnD8ryk/2XgiYIM0cqWrgIwd9juoxjPi4k2YSlQN\n8lrG36cNu2NYLfBst/fipPkRv6A8e/a9SrEPRy1ZyVXuR2eInFDxgaJxHGYN\nNbL6\r\n=Rwq8\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=10"
  },
  "files": [
    "dist/index.js",
    "dist/index.d.ts"
  ],
  "funding": "https://github.com/sindresorhus/mem?sponsor=1",
  "gitHead": "a473986d82cd3dbc61898b376d4cfc490e43aa0b",
  "homepage": "https://github.com/sindresorhus/mem#readme",
  "keywords": [
    "memoize",
    "function",
    "mem",
    "memoization",
    "cache",
    "caching",
    "optimize",
    "performance",
    "ttl",
    "expire",
    "promise"
  ],
  "license": "MIT",
  "main": "dist",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    },
    {
      "name": "fregante",
      "email": "opensource@bfred.it"
    }
  ],
  "name": "mem",
  "optionalDependencies": {},
  "readme": "# mem\n\n> [Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input\n\nMemory is automatically released when an item expires or the cache is cleared.\n\nBy default, **only the first argument is considered** and it only works with [primitives](https://developer.mozilla.org/en-US/docs/Glossary/Primitive). If you need to cache multiple arguments or cache `object`s *by value*, have a look at alternative [caching strategies](#caching-strategy) below.\n\n## Install\n\n```\n$ npm install mem\n```\n\n## Usage\n\n```js\nconst mem = require('mem');\n\nlet i = 0;\nconst counter = () => ++i;\nconst memoized = mem(counter);\n\nmemoized('foo');\n//=> 1\n\n// Cached as it's the same argument\nmemoized('foo');\n//=> 1\n\n// Not cached anymore as the argument changed\nmemoized('bar');\n//=> 2\n\nmemoized('bar');\n//=> 2\n\n// Only the first argument is considered by default\nmemoized('bar', 'foo');\n//=> 2\n```\n\n##### Works fine with promise returning functions\n\n```js\nconst mem = require('mem');\n\nlet i = 0;\nconst counter = async () => ++i;\nconst memoized = mem(counter);\n\n(async () => {\n\tconsole.log(await memoized());\n\t//=> 1\n\n\t// The return value didn't increase as it's cached\n\tconsole.log(await memoized());\n\t//=> 1\n})();\n```\n\n```js\nconst mem = require('mem');\nconst got = require('got');\nconst delay = require('delay');\n\nconst memGot = mem(got, {maxAge: 1000});\n\n(async () => {\n\tawait memGot('https://sindresorhus.com');\n\n\t// This call is cached\n\tawait memGot('https://sindresorhus.com');\n\n\tawait delay(2000);\n\n\t// This call is not cached as the cache has expired\n\tawait memGot('https://sindresorhus.com');\n})();\n```\n\n### Caching strategy\n\nBy default, only the first argument is compared via exact equality (`===`) to determine whether a call is identical.\n\n```js\nconst power = mem((a, b) => Math.power(a, b));\n\npower(2, 2); // => 4, stored in cache with the key 2 (number)\npower(2, 3); // => 4, retrieved from cache at key 2 (number), it's wrong\n```\n\nYou will have to use the `cache` and `cacheKey` options appropriate to your function. In this specific case, the following could work:\n\n```js\nconst power = mem((a, b) => Math.power(a, b), {\n  cacheKey: arguments_ => arguments_.join(',')\n});\n\npower(2, 2); // => 4, stored in cache with the key '2,2' (both arguments as one string)\npower(2, 3); // => 8, stored in cache with the key '2,3'\n```\n\nMore advanced examples follow.\n\n#### Example: Options-like argument\n\nIf your function accepts an object, it won't be memoized out of the box:\n\n```js\nconst heavyMemoizedOperation = mem(heavyOperation);\n\nheavyMemoizedOperation({full: true}); // Stored in cache with the object as key\nheavyMemoizedOperation({full: true}); // Stored in cache with the object as key, again\n// The objects look the same but for JS they're two different objects\n```\n\nYou might want to serialize or hash them, for example using `JSON.stringify` or something like [serialize-javascript](https://github.com/yahoo/serialize-javascript), which can also serialize `RegExp`, `Date` and so on.\n\n```js\nconst heavyMemoizedOperation = mem(heavyOperation, {cacheKey: JSON.stringify});\n\nheavyMemoizedOperation({full: true}); // Stored in cache with the key '[{\"full\":true}]' (string)\nheavyMemoizedOperation({full: true}); // Retrieved from cache\n```\n\nThe same solution also works if it accepts multiple serializable objects:\n\n```js\nconst heavyMemoizedOperation = mem(heavyOperation, {cacheKey: JSON.stringify});\n\nheavyMemoizedOperation('hello', {full: true}); // Stored in cache with the key '[\"hello\",{\"full\":true}]' (string)\nheavyMemoizedOperation('hello', {full: true}); // Retrieved from cache\n```\n\n#### Example: Multiple non-serializable arguments\n\nIf your function accepts multiple arguments that aren't supported by `JSON.stringify` (e.g. DOM elements and functions), you can instead extend the initial exact equality (`===`) to work on multiple arguments using [`many-keys-map`](https://github.com/fregante/many-keys-map):\n\n```js\nconst ManyKeysMap = require('many-keys-map');\n\nconst addListener = (emitter, eventName, listener) => emitter.on(eventName, listener);\n\nconst addOneListener = mem(addListener, {\n\tcacheKey: arguments_ => arguments_, // Use *all* the arguments as key\n\tcache: new ManyKeysMap() // Correctly handles all the arguments for exact equality\n});\n\naddOneListener(header, 'click', console.log); // `addListener` is run, and it's cached with the `arguments` array as key\naddOneListener(header, 'click', console.log); // `addListener` is not run again\naddOneListener(mainContent, 'load', console.log); // `addListener` is run, and it's cached with the `arguments` array as key\n```\n\nBetter yet, if your functionâ€™s arguments are compatible with `WeakMap`, you should use [`deep-weak-map`](https://github.com/futpib/deep-weak-map) instead of `many-keys-map`. This will help avoid memory leaks.\n\n## API\n\n### mem(fn, options?)\n\n#### fn\n\nType: `Function`\n\nFunction to be memoized.\n\n#### options\n\nType: `object`\n\n##### maxAge\n\nType: `number`\\\nDefault: `Infinity`\n\nMilliseconds until the cache expires.\n\n##### cacheKey\n\nType: `Function`\\\nDefault: `arguments_ => arguments_[0]`\\\nExample: `arguments_ => JSON.stringify(arguments_)`\n\nDetermines the cache key for storing the result based on the function arguments. By default, **only the first argument is considered**.\n\nA `cacheKey` function can return any type supported by `Map` (or whatever structure you use in the `cache` option).\n\nRefer to the [caching strategies](#caching-strategy) section for more information.\n\n##### cache\n\nType: `object`\\\nDefault: `new Map()`\n\nUse a different cache storage. Must implement the following methods: `.has(key)`, `.get(key)`, `.set(key, value)`, `.delete(key)`, and optionally `.clear()`. You could for example use a `WeakMap` instead or [`quick-lru`](https://github.com/sindresorhus/quick-lru) for a LRU cache.\n\nRefer to the [caching strategies](#caching-strategy) section for more information.\n\n### mem.decorator(options)\n\nReturns a [decorator](https://github.com/tc39/proposal-decorators) to memoize class methods or static class methods.\n\nNotes:\n\n- Only class methods and getters/setters can be memoized, not regular functions (they aren't part of the proposal);\n- Only [TypeScriptâ€™s decorators](https://www.typescriptlang.org/docs/handbook/decorators.html#parameter-decorators) are supported, not [Babelâ€™s](https://babeljs.io/docs/en/babel-plugin-proposal-decorators), which use a different version of the proposal;\n- Being an experimental feature, they need to be enabled with `--experimentalDecorators`; follow TypeScriptâ€™s docs.\n\n#### options\n\nType: `object`\n\nSame as options for `mem()`.\n\n```ts\nimport mem = require('mem');\n\nclass Example {\n\tindex = 0\n\n\t@mem.decorator()\n\tcounter() {\n\t\treturn ++this.index;\n\t}\n}\n\nclass ExampleWithOptions {\n\tindex = 0\n\n\t@mem.decorator({maxAge: 1000})\n\tcounter() {\n\t\treturn ++this.index;\n\t}\n}\n```\n\n### mem.clear(fn)\n\nClear all cached data of a memoized function.\n\n#### fn\n\nType: `Function`\n\nMemoized function.\n\n## Tips\n\n### Cache statistics\n\nIf you want to know how many times your cache had a hit or a miss, you can make use of [stats-map](https://github.com/SamVerschueren/stats-map) as a replacement for the default cache.\n\n#### Example\n\n```js\nconst mem = require('mem');\nconst StatsMap = require('stats-map');\nconst got = require('got');\n\nconst cache = new StatsMap();\nconst memGot = mem(got, {cache});\n\n(async () => {\n\tawait memGot('https://sindresorhus.com');\n\tawait memGot('https://sindresorhus.com');\n\tawait memGot('https://sindresorhus.com');\n\n\tconsole.log(cache.stats);\n\t//=> {hits: 2, misses: 1}\n})();\n```\n\n## Related\n\n- [p-memoize](https://github.com/sindresorhus/p-memoize) - Memoize promise-returning & async functions\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-mem?utm_source=npm-mem&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/mem.git"
  },
  "scripts": {
    "build": "del-cli dist && tsc",
    "prepack": "npm run build",
    "test": "xo && npm run build && tsd && ava"
  },
  "types": "dist/index.d.ts",
  "version": "8.1.1",
  "xo": {
    "rules": {
      "@typescript-eslint/member-ordering": "off",
      "@typescript-eslint/no-var-requires": "off",
      "@typescript-eslint/no-empty-function": "off"
    }
  }
}
