{
  "_args": [
    [
      {
        "raw": "@npmcli/git@^2.0.1",
        "scope": "@npmcli",
        "escapedName": "@npmcli%2fgit",
        "name": "@npmcli/git",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "c:\\Angular\\TaskManager\\node_modules\\pacote"
    ]
  ],
  "_from": "@npmcli/git@^2.0.1",
  "_hasShrinkwrap": false,
  "_id": "@npmcli/git@2.1.0",
  "_location": "/@npmcli/git",
  "_nodeVersion": "14.17.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/git_2.1.0_1624049026497_0.9770603046176523"
  },
  "_npmUser": {
    "name": "lukekarrys",
    "email": "luke@lukekarrys.com"
  },
  "_npmVersion": "7.16.0",
  "_phantomChildren": {
    "isexe": "2.0.0"
  },
  "_requested": {
    "raw": "@npmcli/git@^2.0.1",
    "scope": "@npmcli",
    "escapedName": "@npmcli%2fgit",
    "name": "@npmcli/git",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pacote"
  ],
  "_resolved": "https://registry.npmjs.org/@npmcli/git/-/git-2.1.0.tgz",
  "_shasum": "2fbd77e147530247d37f325930d457b3ebe894f6",
  "_shrinkwrap": null,
  "_spec": "@npmcli/git@^2.0.1",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\pacote",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "https://izs.me"
  },
  "bugs": {
    "url": "https://github.com/npm/git/issues"
  },
  "dependencies": {
    "@npmcli/promise-spawn": "^1.3.2",
    "lru-cache": "^6.0.0",
    "mkdirp": "^1.0.4",
    "npm-pick-manifest": "^6.1.1",
    "promise-inflight": "^1.0.1",
    "promise-retry": "^2.0.1",
    "semver": "^7.3.5",
    "which": "^2.0.2"
  },
  "description": "a util for spawning git from npm CLI contexts",
  "devDependencies": {
    "slash": "^3.0.0",
    "standard": "^16.0.3",
    "tap": "^15.0.6"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-/hBFX/QG1b+N7PZBFs0bi+evgRZcK9nWBxQKZkGoXUT5hJSwl5c4d7y8/hm+NQZRPhQ67RzFaj5UM9YeyKoryw==",
    "shasum": "2fbd77e147530247d37f325930d457b3ebe894f6",
    "tarball": "https://registry.npmjs.org/@npmcli/git/-/git-2.1.0.tgz",
    "fileCount": 17,
    "unpackedSize": 21661,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgzQWDCRA9TVsSAnZWagAAx1sP/23wiTe0Gk8YSMAoblgK\ndBYjVYFsyQCnGdGb/nCXhwRNqPOG7Yu6rjYn6Gc02WEWUFtXfwl7D0MYKn+e\nqPuLhRnwSfh/koX7g8mIguDjhe9b8QBmj6qq6kd2z1FYFkrZxfICWUcjF14k\nIhKKqQVfTwaAbJs/LRZvn7JZcfD0t1++769h0Co+sapi5dM0TZ88l6ZFhARS\nxCxQo+q3FpXx4XwTd2K/+AljA8nGQ/foLinXZBksMtqu8kAB2JhWPfRHzGCt\nY5Z/SmxeAt/SmUW6Q9wzKhvt5dvq4HVOb3KSg5myHOjiHN4eSwamZLGf0x3b\nXVSlFC7xBMSIGFyyewVKcmxi1xV2zIQs+KD8MvJNr14MwLBCvH7vz6HM86af\nwzYVwLJWVsfboRC/PcPeROCNj2soIq5D7bb9Rk6q82NnIbFlFZnLFbSQS+lp\nqmHBYMfSiYXBWsaNHKREXcBUSnMgU4yZpVBrFzkA4CWVy81Ihk5I9/vtYKgf\ndCteDMCReq9SloRdwLFoehjI7ncBpdqsYFEKJHRxOSB+BpwxsBM2nbcUIQHe\nGRdLWYslyHLyaHUryf7nBKYTM9QYMJiS/URHmfeiSTovm0UVDyH9UeqITfGX\nq9lGHHRmhWYVqsQtgOY16ZSLFxClTa/ybDL434ttUySTug8g66S4pLyLH0HW\n/1dy\r\n=AC1j\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib/*.js"
  ],
  "gitHead": "101abac8640a6fee44833e8ea2222efadfb3ab95",
  "homepage": "https://github.com/npm/git#readme",
  "license": "ISC",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "lukekarrys",
      "email": "luke@lukekarrys.com"
    },
    {
      "name": "gimli01",
      "email": "gimli01@github.com"
    },
    {
      "name": "gar",
      "email": "gar+npm@danger.computer"
    },
    {
      "name": "isaacs",
      "email": "i@izs.me"
    },
    {
      "name": "darcyclarke",
      "email": "darcy@darcyclarke.me"
    },
    {
      "name": "ruyadorno",
      "email": "ruyadorno@hotmail.com"
    },
    {
      "name": "nlf",
      "email": "quitlahok@gmail.com"
    }
  ],
  "name": "@npmcli/git",
  "optionalDependencies": {},
  "readme": "# @npmcli/git\n\nA utility for spawning git from npm CLI contexts.\n\nThis is _not_ an implementation of git itself, it's just a thing that\nspawns child processes to tell the system git CLI implementation to do\nstuff.\n\n## USAGE\n\n```js\nconst git = require('@npmcli/git')\ngit.clone('git://foo/bar.git', 'some-branch', 'some-path', opts) // clone a repo\n  .then(() => git.spawn(['checkout', 'some-branch'], {cwd: 'bar'}))\n  .then(() => git.spawn(['you get the idea']))\n```\n\n## API\n\nMost methods take an options object.  Options are described below.\n\n### `git.spawn(args, opts = {})`\n\nLaunch a `git` subprocess with the arguments specified.\n\nAll the other functions call this one at some point.\n\nProcesses are launched using\n[`@npmcli/promise-spawn`](http://npm.im/@npmcli/promise-spawn), with the\n`stdioString: true` option enabled by default, since git output is\ngenerally in readable string format.\n\nReturn value is a `Promise` that resolves to a result object with `{cmd,\nargs, code, signal, stdout, stderr}` members, or rejects with an error with\nthe same fields, passed back from\n[`@npmcli/promise-spawn`](http://npm.im/@npmcli/promise-spawn).\n\n### `git.clone(repo, ref = 'HEAD', target = null, opts = {})` -> `Promise<sha String>`\n\nClone the repository into `target` path (or the default path for the name\nof the repository), checking out `ref`.\n\nReturn value is the sha of the current HEAD in the locally cloned\nrepository.\n\nIn lieu of a specific `ref`, you may also pass in a `spec` option, which is\na [`npm-package-arg`](http://npm.im/npm-package-arg) object for a `git`\npackage dependency reference.  In this way, you can select SemVer tags\nwithin a range, or any git committish value.  For example:\n\n```js\nconst npa = require('npm-package-arg')\ngit.clone('git@github.com:npm/git.git', '', null, {\n  spec: npa('github:npm/git#semver:1.x'),\n})\n\n// only gitRange and gitCommittish are relevant, so this works, too\ngit.clone('git@github.com:npm/git.git', null, null, {\n  spec: { gitRange: '1.x' }\n})\n```\n\nThis will automatically do a shallow `--depth=1` clone on any hosts that\nare known to support it.  To force a shallow or deep clone, you can set the\n`gitShallow` option to `true` or `false` respectively.\n\n### `git.revs(repo, opts = {})` -> `Promise<rev doc Object>`\n\nFetch a representation of all of the named references in a given\nrepository.  The resulting doc is intentionally somewhat\n[packument](https://www.npmjs.com/package/pacote#packuments)-like, so that\ngit semver ranges can be applied using the same\n[`npm-pick-manifest`](http://npm.im/npm-pick-manifest) logic.\n\nThe resulting object looks like:\n\n```js\nrevs = {\n  versions: {\n    // all semver-looking tags go in here...\n    // version: { sha, ref, rawRef, type }\n    '1.0.0': {\n      sha: '1bc5fba3353f8e1b56493b266bc459276ab23139',\n      ref: 'v1.0.0',\n      rawRef: 'refs/tags/v1.0.0',\n      type: 'tag',\n    },\n  },\n  'dist-tags': {\n    HEAD: '1.0.0',\n    latest: '1.0.0',\n  },\n  refs: {\n    // all the advertised refs that can be cloned down remotely\n    HEAD: { sha, ref, rawRef, type: 'head' },\n    master: { ... },\n    'v1.0.0': { ... },\n    'refs/tags/v1.0.0': { ... },\n  },\n  shas: {\n    // all named shas referenced above\n    // sha: [list, of, refs]\n    '6b2501f9183a1753027a9bf89a184b7d3d4602c7': [\n      'HEAD',\n      'master',\n      'refs/heads/master',\n    ],\n    '1bc5fba3353f8e1b56493b266bc459276ab23139': [ 'v1.0.0', 'refs/tags/v1.0.0' ],\n  },\n}\n```\n\n### `git.is(opts)` -> `Promise<Boolean>`\n\nResolve to `true` if the path argument refers to the root of a git\nrepository.\n\nIt does this by looking for a file in `${path}/.git/index`, which is not an\nairtight indicator, but at least avoids being fooled by an empty directory\nor a file named `.git`.\n\n### `git.find(opts)` -> `Promise<String | null>`\n\nGiven a path, walk up the file system tree until a git repo working\ndirectory is found.  Since this calls `stat` a bunch of times, it's\nprobably best to only call it if you're reasonably sure you're likely to be\nin a git project somewhere.\n\nResolves to `null` if not in a git project.\n\n### `git.isClean(opts = {})` -> `Promise<Boolean>`\n\nReturn true if in a git dir, and that git dir is free of changes.  This\nwill resolve `true` if the git working dir is clean, or `false` if not, and\nreject if the path is not within a git directory or some other error\noccurs.\n\n## OPTIONS\n\n- `retry` An object to configure retry behavior for transient network\n  errors with exponential backoff.\n  - `retries`: Defaults to `opts.fetchRetries` or 2\n  - `factor`: Defaults to `opts.fetchRetryFactor` or 10\n  - `maxTimeout`: Defaults to `opts.fetchRetryMaxtimeout` or 60000\n  - `minTimeout`: Defaults to `opts.fetchRetryMintimeout` or 1000\n- `git` Path to the `git` binary to use.  Will look up the first `git` in\n  the `PATH` if not specified.\n- `spec` The [`npm-package-arg`](http://npm.im/npm-package-arg) specifier\n  object for the thing being fetched (if relevant).\n- `fakePlatform` set to a fake value of `process.platform` to use.  (Just\n  for testing `win32` behavior on Unix, and vice versa.)\n- `cwd` The current working dir for the git command.  Particularly for\n  `find` and `is` and `isClean`, it's good to know that this defaults to\n  `process.cwd()`, as one might expect.\n- Any other options that can be passed to\n  [`@npmcli/promise-spawn`](http://npm.im/@npmcli/promise-spawn), or\n  `child_process.spawn()`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/git.git"
  },
  "scripts": {
    "lint": "standard",
    "lint:fix": "standard --fix",
    "posttest": "npm run lint",
    "postversion": "npm publish",
    "prepublishOnly": "git push origin --follow-tags",
    "preversion": "npm test",
    "snap": "tap",
    "test": "tap"
  },
  "tap": {
    "check-coverage": true,
    "coverage-map": "map.js"
  },
  "version": "2.1.0"
}
