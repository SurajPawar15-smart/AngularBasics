{
  "_args": [
    [
      {
        "raw": "@npmcli/run-script@^1.8.2",
        "scope": "@npmcli",
        "escapedName": "@npmcli%2frun-script",
        "name": "@npmcli/run-script",
        "rawSpec": "^1.8.2",
        "spec": ">=1.8.2 <2.0.0",
        "type": "range"
      },
      "c:\\Angular\\TaskManager\\node_modules\\pacote"
    ]
  ],
  "_from": "@npmcli/run-script@^1.8.2",
  "_hasShrinkwrap": false,
  "_id": "@npmcli/run-script@1.8.5",
  "_location": "/@npmcli/run-script",
  "_nodeVersion": "15.14.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/run-script_1.8.5_1619098402338_0.08856624126596091"
  },
  "_npmUser": {
    "name": "ruyadorno",
    "email": "ruyadorno@hotmail.com"
  },
  "_npmVersion": "7.7.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@npmcli/run-script@^1.8.2",
    "scope": "@npmcli",
    "escapedName": "@npmcli%2frun-script",
    "name": "@npmcli/run-script",
    "rawSpec": "^1.8.2",
    "spec": ">=1.8.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pacote"
  ],
  "_resolved": "https://registry.npmjs.org/@npmcli/run-script/-/run-script-1.8.5.tgz",
  "_shasum": "f250a0c5e1a08a792d775a315d0ff42fc3a51e1d",
  "_shrinkwrap": null,
  "_spec": "@npmcli/run-script@^1.8.2",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\pacote",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "https://izs.me"
  },
  "bugs": {
    "url": "https://github.com/npm/run-script/issues"
  },
  "dependencies": {
    "@npmcli/node-gyp": "^1.0.2",
    "@npmcli/promise-spawn": "^1.3.2",
    "infer-owner": "^1.0.4",
    "node-gyp": "^7.1.0",
    "read-package-json-fast": "^2.0.1"
  },
  "description": "Run a lifecycle script for a package (descendant of npm-lifecycle)",
  "devDependencies": {
    "eslint": "^7.19.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^4.2.1",
    "eslint-plugin-standard": "^5.0.0",
    "minipass": "^3.1.1",
    "require-inject": "^1.4.4",
    "tap": "^15.0.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-NQspusBCpTjNwNRFMtz2C5MxoxyzlbuJ4YEhxAKrIonTiirKDtatsZictx9RgamQIx6+QuHMNmPl0wQdoESs9A==",
    "shasum": "f250a0c5e1a08a792d775a315d0ff42fc3a51e1d",
    "tarball": "https://registry.npmjs.org/@npmcli/run-script/-/run-script-1.8.5.tgz",
    "fileCount": 14,
    "unpackedSize": 16548,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJggXsiCRA9TVsSAnZWagAAQEkP/1Ag+FY790G6i8YPjwXa\n7wYT9YKlS1ba74kF6Dv+wPRiik5I3JwXYmZfkwSaECisyPvTgnzAVjlMX0gB\n1Wsg4e8olYmgFsO8mOrM8jJC31slG+AYZcOGWT52lh73LpsDOjHwIgTmrYWe\nXipI5QVxqVm08G19L0g30N3hYmi8pe5aimcPcFgQsiljUx3fjdXLBT8XvCfp\nN/cjSY4NWTxlc7bQHdRh6P58nz95XYjAlgC9VpiUZ3YkbtWwjIyAgiFfbpIL\n5WSIzNDO8S1ZiLwHbgXMsnnU7Sqv8fPs33Hy9ihB6M9jVCm1UaEMAiUdSUJw\nxuX4WdmLcc0EOTtEZcy/yaR6U4wWBlUMyFxpBXxRrrLa3vdY4FR9WU68auMM\n873gsjFNBCfGfGQ0GgegDpO22NWZ/lLMG18fVx501lDCJRo0clEof/KTwLgK\nKobtrrZzoEu/vK3o7McxJdHgkMJU3TbBTWYTjJB3X45SCJaFr+Bf+4GeQ9U/\nTzyEOUF15xxEwY+Le33YdXfWQQICBcBytD1NoyYuRxqrpjOZME1QjxzImCMo\nL5u+16WcvLEA9o7ytBZUndbrp7hGgEc5IQZEJz1Utg3/BgbOU6kHzVAzhnIl\n17u53PjI1LuXYRPv9yggyLnd6OXFwzLqt7C/HyNsq7FeaQ/zybKreM1gTwOj\nz2Qp\r\n=yTGN\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib/**/*.js",
    "lib/node-gyp-bin"
  ],
  "gitHead": "47a4d539fb07220e7215cc0e482683b76407ef9b",
  "homepage": "https://github.com/npm/run-script#readme",
  "license": "ISC",
  "main": "lib/run-script.js",
  "maintainers": [
    {
      "name": "gimli01",
      "email": "gimli01@github.com"
    },
    {
      "name": "gar",
      "email": "gar+npm@danger.computer"
    },
    {
      "name": "isaacs",
      "email": "i@izs.me"
    },
    {
      "name": "darcyclarke",
      "email": "darcy@darcyclarke.me"
    },
    {
      "name": "ruyadorno",
      "email": "ruyadorno@hotmail.com"
    },
    {
      "name": "nlf",
      "email": "quitlahok@gmail.com"
    }
  ],
  "name": "@npmcli/run-script",
  "optionalDependencies": {},
  "readme": "# @npmcli/run-script\n\nRun a lifecycle script for a package (descendant of npm-lifecycle)\n\n## USAGE\n\n```js\nconst runScript = require('@npmcli/run-script')\n\nrunScript({\n  // required, the script to run\n  event: 'install',\n\n  // extra args to pass to the command, defaults to []\n  args: [],\n\n  // required, the folder where the package lives\n  path: '/path/to/package/folder',\n\n  // optional, defaults to /bin/sh on unix, or cmd.exe on windows\n  scriptShell: '/bin/bash',\n\n  // optional, defaults to false\n  // return stdout and stderr as strings rather than buffers\n  stdioString: true,\n\n  // optional, additional environment variables to add\n  // note that process.env IS inherited by default\n  // Always set:\n  // - npm_package_json The package.json file in the folder\n  // - npm_lifecycle_event The event that this is being run for\n  // - npm_lifecycle_script The script being run\n  // The fields described in https://github.com/npm/rfcs/pull/183\n  env: {\n    npm_package_from: 'foo@bar',\n    npm_package_resolved: 'https://registry.npmjs.org/foo/-/foo-1.2.3.tgz',\n    npm_package_integrity: 'sha512-foobarbaz',\n  },\n\n  // defaults to 'pipe'.  Can also pass an array like you would to node's\n  // exec or spawn functions.  Note that if it's anything other than\n  // 'pipe' then the stdout/stderr values on the result will be missing.\n  // npm cli sets this to 'inherit' for explicit run-scripts (test, etc.)\n  // but leaves it as 'pipe' for install scripts that run in parallel.\n  stdio: 'inherit',\n\n  // print the package id and script, and the command to be run, like:\n  // > somepackage@1.2.3 postinstall\n  // > make all-the-things\n  // Defaults true when stdio:'inherit', otherwise suppressed\n  banner: true,\n})\n  .then(({ code, signal, stdout, stderr, pkgid, path, event, script }) => {\n    // do something with the results\n  })\n  .catch(er => {\n    // command did not work.\n    // er is decorated with:\n    // - code\n    // - signal\n    // - stdout\n    // - stderr\n    // - path\n    // - pkgid (name@version string)\n    // - event\n    // - script\n  })\n```\n\n## API\n\nCall the exported `runScript` function with an options object.\n\nReturns a promise that resolves to the result of the execution.  Promise\nrejects if the execution fails (exits non-zero) or has any other error.\nRejected errors are decorated with the same values as the result object.\n\nIf the stdio options mean that it'll have a piped stdin, then the stdin is\nended immediately on the child process.  If stdin is shared with the parent\nterminal, then it is up to the user to end it, of course.\n\n### Results\n\n- `code` Process exit code\n- `signal` Process exit signal\n- `stdout` stdout data (Buffer, or String when `stdioString` set to true)\n- `stderr` stderr data (Buffer, or String when `stdioString` set to true)\n- `path` Path to the package executing its script\n- `event` Lifecycle event being run\n- `script` Command being run\n\n### Options\n\n- `path` Required.  The path to the package having its script run.\n- `event` Required.  The event being executed.\n- `args` Optional, default `[]`.  Extra arguments to pass to the script.\n- `env` Optional, object of fields to add to the environment of the\n  subprocess.  Note that process.env IS inherited by default These are\n  always set:\n  - `npm_package_json` The package.json file in the folder\n  - `npm_lifecycle_event` The event that this is being run for\n  - `npm_lifecycle_script` The script being run\n  - The `package.json` fields described in\n    [RFC183](https://github.com/npm/rfcs/pull/183/files).\n- `scriptShell` Optional, defaults to `/bin/sh` on Unix, defaults to\n  `env.ComSpec` or `cmd` on Windows.  Custom script to use to execute the\n  command.\n- `stdio` Optional, defaults to `'pipe'`.  The same as the `stdio` argument\n  passed to `child_process` functions in Node.js.  Note that if a stdio\n  output is set to anything other than `pipe`, it will not be present in\n  the result/error object.\n- `cmd` Optional.  Override the script from the `package.json` with\n  something else, which will be run in an otherwise matching environment.\n- `stdioString` Optional, defaults to `false`.  Return string values for\n  `stderr` and `stdout` rather than Buffers.\n- `banner` Optional, defaults to `true`.  If the `stdio` option is set to\n  `'inherit'`, then print a banner with the package name and version, event\n  name, and script command to be run.  Set explicitly to `false` to disable\n  for inherited stdio.\n\nNote that this does _not_ run pre-event and post-event scripts.  The\ncaller has to manage that process themselves.\n\n## Differences from [npm-lifecycle](https://github.com/npm/npm-lifecycle)\n\nThis is an implementation to satisfy [RFC\n90](https://github.com/npm/rfcs/pull/90), [RFC\n77](https://github.com/npm/rfcs/pull/77), and [RFC\n73](https://github.com/npm/rfcs/pull/73).\n\nApart from those behavior changes in npm v7, this is also just refresh of\nthe codebase, with modern coding techniques and better test coverage.\n\nFunctionally, this means:\n\n- Output is not dumped to the top level process's stdio by default.\n- Less stuff is put into the environment.\n- It is not opinionated about logging.  (So, at least with the logging\n  framework in npm v7.0 and before, the caller has to call\n  `log.disableProgress()` and `log.enableProgress()` at the appropriate\n  times, if necessary.)\n- The directory containing the `node` executable is _never_ added to the\n  `PATH` environment variable.  (Ie, `--scripts-prepend-node-path` is\n  effectively always set to `false`.)  Doing so causes more unintended side\n  effects than it ever prevented.\n- Hook scripts are not run by this module.  If the caller wishes to run\n  hook scripts, then they can override the default package script with an\n  explicit `cmd` option pointing to the `node_modules/.hook/${event}`\n  script.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/run-script.git"
  },
  "scripts": {
    "eslint": "eslint",
    "lint": "npm run eslint -- \"lib/**/*.js\"",
    "lintfix": "npm run lint -- --fix",
    "postversion": "npm publish",
    "prepublishOnly": "git push origin --follow-tags",
    "preversion": "npm test",
    "test": "tap"
  },
  "tap": {
    "check-coverage": true,
    "coverage-map": "map.js"
  },
  "version": "1.8.5"
}
