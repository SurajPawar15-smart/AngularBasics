{
  "_args": [
    [
      {
        "raw": "minipass-json-stream@^1.0.1",
        "scope": null,
        "escapedName": "minipass-json-stream",
        "name": "minipass-json-stream",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "c:\\Angular\\TaskManager\\node_modules\\npm-registry-fetch"
    ]
  ],
  "_from": "minipass-json-stream@^1.0.1",
  "_hasShrinkwrap": false,
  "_id": "minipass-json-stream@1.0.1",
  "_location": "/minipass-json-stream",
  "_nodeVersion": "12.8.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/minipass-json-stream_1.0.1_1569956780798_0.737651803293434"
  },
  "_npmUser": {
    "name": "isaacs",
    "email": "i@izs.me"
  },
  "_npmVersion": "6.12.0-next.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "minipass-json-stream@^1.0.1",
    "scope": null,
    "escapedName": "minipass-json-stream",
    "name": "minipass-json-stream",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/npm-registry-fetch"
  ],
  "_resolved": "https://registry.npmjs.org/minipass-json-stream/-/minipass-json-stream-1.0.1.tgz",
  "_shasum": "7edbb92588fbfc2ff1db2fc10397acb7b6b44aa7",
  "_shrinkwrap": null,
  "_spec": "minipass-json-stream@^1.0.1",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\npm-registry-fetch",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "https://izs.me"
  },
  "bugs": {
    "url": "https://github.com/npm/minipass-json-stream/issues"
  },
  "dependencies": {
    "jsonparse": "^1.3.1",
    "minipass": "^3.0.0"
  },
  "description": "Like JSONStream, but using Minipass streams",
  "devDependencies": {
    "JSONStream": "^1.3.5",
    "tap": "^14.6.9"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ODqY18UZt/I8k+b7rl2AENgbWE8IDYam+undIJONvigAz8KR5GWblsFTEfQs0WODsjbSXWlm+JHEv8Gr6Tfdbg==",
    "shasum": "7edbb92588fbfc2ff1db2fc10397acb7b6b44aa7",
    "tarball": "https://registry.npmjs.org/minipass-json-stream/-/minipass-json-stream-1.0.1.tgz",
    "fileCount": 4,
    "unpackedSize": 13013,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdk6OtCRA9TVsSAnZWagAAhfcQAJSXvKVnNuQz2ulGNgsZ\niUDMqNOktkBnu0Ywd+fc3J1DD5Q62bg05utyAdt07pdPVmSKdVfyaxYIk2yS\nm7bxbdk1OueONpLFJMtgEoCtinnFRrEtjAyPP0pIKh3gTpJiZbjgP91+fpqo\nxz7mLfHn4V3eZGsMzaChKBEequKbEXnc4VvX/2oMExgzu/mWC/TqErNKYF/w\nHRd4ehuzVrAL2CBXkHMJL5TRyhq5ANnFOKfWCxU9rNgaApYmcPYetfyEwIKE\nk44SfNPCFfbYB+xjF9Rm4lQCIzF5x3rlHfMPqXQ8SIPbBf4ESgtV1deD6p4Q\np3e2THuWXf0KIxBbJN0tkQWefDrNtG0Acbzl29YmmAZOm5XAu1EkCukplAw5\nljJJyXFHJ1tp/Fi7HxqU2/sGMqFxjEEbq74NV5ipBY4+yfDPwpgo6SuQXCEX\n0wPdUobffLND9ynRCsBWkjToRmXcfzopV2gAc7fdcLwiBajh1FHQzm9DHvjf\n0lmXbTEwgDoH+IJA4SlylnM0n/DiapBqPpeLmfIgGRaFMuouxVaMuSpL+ouZ\nvBHt9kdUqH5YARI75yshspTnlvhX3aKsFSzv+y7st9MjYFvEA+Nz+m/StlNo\nBfQRKkEP+2CP00hyPYhjaUFys60AbXlqZM4TQ2AUVT5dfD1Mlng3lDWpDihq\nNNYb\r\n=4czE\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "38826f1f7ccc32023afc603c218fb6f2a15b407e",
  "homepage": "https://github.com/npm/minipass-json-stream#readme",
  "keywords": [
    "stream",
    "json",
    "parse",
    "minipass",
    "JSONStream"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "isaacs",
      "email": "i@izs.me"
    }
  ],
  "name": "minipass-json-stream",
  "optionalDependencies": {},
  "readme": "# minipass-json-stream\n\nLike [JSONStream](http://npm.im/JSONStream), but using Minipass streams\n\n## install\n\n```\nnpm install minipass-json-stream\n```\n\n## example\n\n```js\n\nconst request = require('request')\nconst JSONStream = require('minipass-json-stream')\nconst es = require('event-stream')\n\nrequest({url: 'http://isaacs.couchone.com/registry/_all_docs'})\n  .pipe(JSONStream.parse('rows.*'))\n  .pipe(es.mapSync(function (data) {\n    console.error(data)\n    return data\n  }))\n```\n\n## new JSONStream(options)\n\nCreate a new stream.  This is a [minipass](http://npm.im/minipass) stream\nthat is always set in `objectMode`.  It emits objects parsed out of\nstring/buffer JSON input that match the supplied `path` option.\n\n## JSONStream.parse(path)\n\nReturn a new JSONStream object to stream values that match a path.\n\n(Equivalent to `new JSONStream({path})`.)\n\n``` js\nJSONStream.parse('rows.*.doc')\n```\n\nThe `..` operator is the recursive descent operator from\n[JSONPath](http://goessner.net/articles/JsonPath/), which will match a\nchild at any depth (see examples below).\n\nIf your keys have keys that include `.` or `*` etc, use an array instead.\n`['row', true, /^doc/]`.\n\nIf you use an array, `RegExp`s, booleans, and/or functions. The `..`\noperator is also available in array representation, using `{recurse:\ntrue}`.  any object that matches the path will be emitted as 'data' (and\n`pipe`d down stream)\n\nIf `path` is empty or null, no 'data' events are emitted.\n\nIf you want to have keys emitted, you can prefix your `*` operator with\n`$`: `obj.$*` - in this case the data passed to the stream is an object\nwith a `key` holding the key and a `value` property holding the data.\n\n### Examples\n\nquery a couchdb view:\n\n``` bash\ncurl -sS localhost:5984/tests/_all_docs&include_docs=true\n```\nyou will get something like this:\n\n``` js\n{\"total_rows\":129,\"offset\":0,\"rows\":[\n  { \"id\":\"change1_0.6995461115147918\"\n  , \"key\":\"change1_0.6995461115147918\"\n  , \"value\":{\"rev\":\"1-e240bae28c7bb3667f02760f6398d508\"}\n  , \"doc\":{\n      \"_id\":  \"change1_0.6995461115147918\"\n    , \"_rev\": \"1-e240bae28c7bb3667f02760f6398d508\",\"hello\":1}\n  },\n  { \"id\":\"change2_0.6995461115147918\"\n  , \"key\":\"change2_0.6995461115147918\"\n  , \"value\":{\"rev\":\"1-13677d36b98c0c075145bb8975105153\"}\n  , \"doc\":{\n      \"_id\":\"change2_0.6995461115147918\"\n    , \"_rev\":\"1-13677d36b98c0c075145bb8975105153\"\n    , \"hello\":2\n    }\n  },\n]}\n```\n\nwe are probably most interested in the `rows.*.doc`\n\ncreate a `JSONStream` that parses the documents from the feed like this:\n\n``` js\nvar stream = JSONStream.parse(['rows', true, 'doc']) //rows, ANYTHING, doc\n\nstream.on('data', function(data) {\n  console.log('received:', data);\n});\n\n//emits anything from _before_ the first match\nstream.on('header', function (data) {\n  console.log('header:', data) // => {\"total_rows\":129,\"offset\":0}\n})\n```\n\nawesome!\n\nIn case you wanted the contents the doc emitted:\n\n``` js\n// equivalent to: 'rows.*.doc.$*'\nvar stream = JSONStream.parse([\n  'rows',\n  true,\n  'doc',\n  {emitKey: true}\n]) //rows, ANYTHING, doc, items in docs with keys\n\nstream.on('data', function(data) {\n  console.log('key:', data.key);\n  console.log('value:', data.value);\n});\n```\n\nYou can also emit the path:\n\n``` js\nvar stream = JSONStream.parse([\n  'rows',\n  true,\n  'doc',\n  {emitPath: true}\n]) //rows, ANYTHING, doc, items in docs with keys\n\nstream.on('data', function(data) {\n  console.log('path:', data.path);\n  console.log('value:', data.value);\n});\n```\n\n### recursive patterns (..)\n\n`JSONStream.parse('docs..value')` \n(or `JSONStream.parse(['docs', {recurse: true}, 'value'])` using an array)\nwill emit every `value` object that is a child, grand-child, etc. of the \n`docs` object. In this example, it will match exactly 5 times at various depth\nlevels, emitting 0, 1, 2, 3 and 4 as results.\n\n```js\n{\n  \"total\": 5,\n  \"docs\": [\n    {\n      \"key\": {\n        \"value\": 0,\n        \"some\": \"property\"\n      }\n    },\n    {\"value\": 1},\n    {\"value\": 2},\n    {\"blbl\": [{}, {\"a\":0, \"b\":1, \"value\":3}, 10]},\n    {\"value\": 4}\n  ]\n}\n```\n\n## JSONStream.parse(pattern, map)\n\n(Equivalent to `new JSONStream({ pattern, map })`)\n\nprovide a function that can be used to map or filter\nthe json output. `map` is passed the value at that node of the pattern,\nif `map` return non-nullish (anything but `null` or `undefined`)\nthat value will be emitted in the stream. If it returns a nullish value,\nnothing will be emitted.\n\n`JSONStream` also emits `'header'` and `'footer'` events,\nthe `'header'` event contains anything in the output that was before\nthe first match, and the `'footer'`, is anything after the last match.\n\n## Acknowlegements\n\nThis module is a fork of [JSONStream](http://npm.im/JSONStream) by Dominic\nTarr, modified and redistributed under the terms of the MIT license.\n\nthis module depends on https://github.com/creationix/jsonparse\nby Tim Caswell\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/minipass-json-stream.git"
  },
  "scripts": {
    "postpublish": "git push origin --follow-tags",
    "postversion": "npm publish",
    "preversion": "npm test",
    "snap": "tap",
    "test": "tap"
  },
  "tap": {
    "check-coverage": true
  },
  "version": "1.0.1"
}
