{
  "_args": [
    [
      {
        "raw": "es-module-lexer@^0.4.0",
        "scope": null,
        "escapedName": "es-module-lexer",
        "name": "es-module-lexer",
        "rawSpec": "^0.4.0",
        "spec": ">=0.4.0 <0.5.0",
        "type": "range"
      },
      "c:\\Angular\\TaskManager\\node_modules\\webpack"
    ]
  ],
  "_from": "es-module-lexer@^0.4.0",
  "_hasShrinkwrap": false,
  "_id": "es-module-lexer@0.4.1",
  "_location": "/es-module-lexer",
  "_nodeVersion": "15.5.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/es-module-lexer_0.4.1_1614787191358_0.7467107318831969"
  },
  "_npmUser": {
    "name": "guybedford",
    "email": "guybedford@gmail.com"
  },
  "_npmVersion": "7.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "es-module-lexer@^0.4.0",
    "scope": null,
    "escapedName": "es-module-lexer",
    "name": "es-module-lexer",
    "rawSpec": "^0.4.0",
    "spec": ">=0.4.0 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webpack"
  ],
  "_resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-0.4.1.tgz",
  "_shasum": "dda8c6a14d8f340a24e34331e0fab0cb50438e0e",
  "_shrinkwrap": null,
  "_spec": "es-module-lexer@^0.4.0",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\webpack",
  "author": {
    "name": "Guy Bedford"
  },
  "bugs": {
    "url": "https://github.com/guybedford/es-module-lexer/issues"
  },
  "dependencies": {},
  "description": "Lexes ES modules returning their import/export metadata",
  "devDependencies": {
    "@babel/cli": "^7.5.5",
    "@babel/core": "^7.5.5",
    "@babel/plugin-transform-modules-commonjs": "^7.5.0",
    "kleur": "^2.0.2",
    "mocha": "^5.2.0",
    "terser": "^4.1.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ooYciCUtfw6/d2w56UVeqHPcoCFAiJdz5XOkYpv/Txl1HMUozpXjz/2RIQgqwKdXNDPSF1W7mJCFse3G+HDyAA==",
    "shasum": "dda8c6a14d8f340a24e34331e0fab0cb50438e0e",
    "tarball": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-0.4.1.tgz",
    "fileCount": 7,
    "unpackedSize": 34026,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgP7J3CRA9TVsSAnZWagAARA8QAI75oQMv+n+DYY51ZiaL\nRWoBvtOJgy7zNywA2Ub3sEMcsZQHdC1LidGUYDpYehsyZhgDnINd1jQaJiXY\ncPaB9a3sp3EZOPLEKc3/jnMGqGblCWXTkRCP0WE/uKNX7yVYhV3M/r49mWy0\nKesnpSqNh0GmRDICZKb6MC1rfvQ026HIIpK6ts65gwUa/eb+PpBfG4wNFLP7\ncfPlkMtrP9G8v0ocAad5ZaXiMZ4kEAEP1oKZeyEM39Oto1vHy0oTFViFeMDR\nE3xPucQqkNoJaSezNyXJ1rOh3utRcWbjdRaoP9aP6WxIV/bK9bC1WNPNDZyA\nRANx9imJr76ZHjVwBZTad3Yjc9O67N0SokCGShoBEdR3AJ4Pln8C6Q+jTJ98\nAotaEZxmzBAeSsESBOwlSNeskm76VNkoVqk+lRHwpsFkMv7r7dNENvjq60n/\nB14CwFN2PMeMBnszl1K0lEJjEoPUmn2KQJN4slFl1E8Z57G5iSaWmZO9OXjc\n9Xjr45do0yLmdLb5zmroM4SSd/teA9kvEcd5Vjwo26XA+O6/qYu3eYDroPLu\nIOzWBtPhY2HRlvI0BofyIwlNJGif9e/5iI1hWQAYF3amb/tQGPO77QnDCI9w\nXfuCbxetp1uJI56DxUkrfNcybu4MVx1tjFl3uYqujp7jVZy26Wc5zQECYx1/\n41ok\r\n=GXIr\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist",
    "types"
  ],
  "gitHead": "f720d83e0aac69cfb0e3fe3d73911e983ab56668",
  "homepage": "https://github.com/guybedford/es-module-lexer#readme",
  "license": "MIT",
  "main": "dist/lexer.cjs",
  "maintainers": [
    {
      "name": "guybedford",
      "email": "guybedford@gmail.com"
    }
  ],
  "module": "dist/lexer.js",
  "name": "es-module-lexer",
  "optionalDependencies": {},
  "readme": "# ES Module Lexer\n\n[![Build Status][travis-image]][travis-url]\n\nA JS module syntax lexer used in [es-module-shims](https://github.com/guybedford/es-module-shims).\n\nOutputs the list of exports and locations of import specifiers, including dynamic import and import meta handling.\n\nA very small single JS file (4KiB gzipped) that includes inlined Web Assembly for very fast source analysis of ECMAScript module syntax only.\n\nFor an example of the performance, Angular 1 (720KiB) is fully parsed in 5ms, in comparison to the fastest JS parser, Acorn which takes over 100ms.\n\n_Comprehensively handles the JS language grammar while remaining small and fast. - ~10ms per MB of JS cold and ~5ms per MB of JS warm, [see benchmarks](#benchmarks) for more info._\n\n### Usage\n\n```\nnpm install es-module-lexer\n```\n\nFor use in CommonJS:\n\n```js\nconst { init, parse } = require('es-module-lexer');\n\n(async () => {\n  // either await init, or call parse asynchronously\n  // this is necessary for the Web Assembly boot\n  await init;\n\n  const [imports, exports] = parse('export var p = 5');\n  exports[0] === 'p';\n})();\n```\n\nAn ES module version is also available from `dist/lexer.js`:  \nNote: This version will be automatically used in rollup/es-dev-server/node (if an es-module project)\n\n```js\nimport { init, parse } from 'es-module-lexer/dist/lexer.js';\n\n(async () => {\n  await init;\n\n  const source = `\n    import { a } from 'asdf';\n    export var p = 5;\n    export function q () {\n\n    };\n\n    // Comments provided to demonstrate edge cases\n    import /*comment!*/ ('asdf');\n    import /*comment!*/.meta.asdf;\n  `;\n\n  const [imports, exports] = parse(source, 'optional-sourcename');\n\n  // Returns \"asdf\"\n  imports[0].n\n  source.substring(imports[0].s, imports[0].e);\n  // \"s\" is shorthand for \"start\"\n  // \"e\" is shorthand for \"end\"\n\n  // Returns \"import { a } from 'asdf';\"\n  source.substring(imports[0].ss, imports[0].se);\n  // \"ss\" is shorthand for \"statement start\"\n  // \"se\" is shorthand for \"statement end\"\n\n  // Returns \"p,q\"\n  exports.toString();\n\n  // Dynamic imports are indicated by imports[1].d > -1\n  // In this case the \"d\" index is the start of the dynamic import\n  // Returns true\n  imports[1].d > -1;\n\n  // Returns \"asdf\"\n  imports[1].n\n  source.substring(imports[1].s, imports[1].e);\n  // Returns \"import /*comment!*/ (\"\n  source.substring(imports[1].d, imports[1].s);\n  // Returns \"import /*comment!*/ ('asdf')\"\n  source.substring(imports[1].d, imports[1].e + 1);\n  // imports[1].ss and imports[1].se is not meaningful \n  // because dynamic import is not a statement\n\n  // import.meta is indicated by imports[2].d === -2\n  // Returns true\n  imports[2].d === -2;\n  // Returns \"import /*comment!*/.meta\"\n  source.substring(imports[2].s, imports[2].e);\n})();\n```\n\n### Escape Sequences\n\nTo handle escape sequences in specifier strings, the `.n` field of imported specifiers will be provided where possible.\n\nFor dynamic import expressions, this field will be empty if not a valid JS string.\n\n### Facade Detection\n\nFacade modules that only use import / export syntax can be detected via the third return value:\n\n```js\nconst [,, facade] = parse(`\n  export * from 'external';\n  import * as ns from 'external2';\n  export { a as b } from 'external3';\n  export { ns };\n`);\nfacade === true;\n```\n\n### Environment Support\n\nNode.js 10+, and [all browsers with Web Assembly support](https://caniuse.com/#feat=wasm).\n\n### Grammar Support\n\n* Token state parses all line comments, block comments, strings, template strings, blocks, parens and punctuators.\n* Division operator / regex token ambiguity is handled via backtracking checks against punctuator prefixes, including closing brace or paren backtracking.\n* Always correctly parses valid JS source, but may parse invalid JS source without errors.\n\n### Limitations\n\nThe lexing approach is designed to deal with the full language grammar including RegEx / division operator ambiguity through backtracking and paren / brace tracking.\n\nThe only limitation to the reduced parser is that the \"exports\" list may not correctly gather all export identifiers in the following edge cases:\n\n```js\n// Only \"a\" is detected as an export, \"q\" isn't\nexport var a = 'asdf', q = z;\n\n// \"b\" is not detected as an export\nexport var { a: b } = asdf;\n```\n\nThe above cases are handled gracefully in that the lexer will keep going fine, it will just not properly detect the export names above.\n\n### Benchmarks\n\nBenchmarks can be run with `npm run bench`.\n\nCurrent results:\n\n```\nModule load time\n> 7ms\nCold Run, All Samples\ntest/samples/*.js (3057 KiB)\n> 33ms\n\nWarm Runs (average of 25 runs)\ntest/samples/angular.js (719 KiB)\n> 4.08ms\ntest/samples/angular.min.js (188 KiB)\n> 2.08ms\ntest/samples/d3.js (491 KiB)\n> 4.72ms\ntest/samples/d3.min.js (274 KiB)\n> 3ms\ntest/samples/magic-string.js (34 KiB)\n> 0.04ms\ntest/samples/magic-string.min.js (20 KiB)\n> 0ms\ntest/samples/rollup.js (902 KiB)\n> 8.16ms\ntest/samples/rollup.min.js (429 KiB)\n> 4.28ms\n\nWarm Runs, All Samples (average of 25 runs)\ntest/samples/*.js (3057 KiB)\n> 25.68ms\n```\n\n### Building\n\nTo build download the WASI SDK from https://github.com/WebAssembly/wasi-sdk/releases.\n\nThe Makefile assumes the existence of \"wasi-sdk-11.0\" and \"wabt\" (optional) as sibling folders to this project.\n\nThe build through the Makefile is then run via `make lib/lexer.wasm`, which can also be triggered via `npm run build-wasm` to create `dist/lexer.js`.\n\nOn Windows it may be preferable to use the Linux subsystem.\n\nAfter the Web Assembly build, the CJS build can be triggered via `npm run build`.\n\n### License\n\nMIT\n\n[travis-url]: https://travis-ci.org/guybedford/es-module-lexer\n[travis-image]: https://travis-ci.org/guybedford/es-module-lexer.svg?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/guybedford/es-module-lexer.git"
  },
  "scripts": {
    "bench": "node --experimental-modules --expose-gc bench/index.js",
    "build": "node --experimental-modules build.js && babel dist/lexer.js | terser -o dist/lexer.cjs",
    "build-wasm": "make lib/lexer.wasm && node build.js",
    "footprint": "npm run build && cat dist/lexer.js | gzip -9f | wc -c",
    "prepublishOnly": "npm run build",
    "test": "NODE_OPTIONS=\"--experimental-modules\" mocha -b -u tdd test/*.cjs"
  },
  "type": "module",
  "types": "types/lexer.d.ts",
  "version": "0.4.1"
}
