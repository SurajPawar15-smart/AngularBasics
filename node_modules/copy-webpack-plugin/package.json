{
  "_args": [
    [
      {
        "raw": "copy-webpack-plugin@8.1.1",
        "scope": null,
        "escapedName": "copy-webpack-plugin",
        "name": "copy-webpack-plugin",
        "rawSpec": "8.1.1",
        "spec": "8.1.1",
        "type": "version"
      },
      "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular"
    ]
  ],
  "_from": "copy-webpack-plugin@8.1.1",
  "_hasShrinkwrap": false,
  "_id": "copy-webpack-plugin@8.1.1",
  "_location": "/copy-webpack-plugin",
  "_nodeVersion": "12.22.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/copy-webpack-plugin_8.1.1_1617709606379_0.7131931437233683"
  },
  "_npmUser": {
    "name": "evilebottnawi",
    "email": "sheo13666q@gmail.com"
  },
  "_npmVersion": "7.7.6",
  "_phantomChildren": {
    "@types/json-schema": "7.0.7",
    "ajv-keywords": "3.5.2",
    "fast-deep-equal": "3.1.3",
    "fast-json-stable-stringify": "2.1.0",
    "uri-js": "4.4.1",
    "yocto-queue": "0.1.0"
  },
  "_requested": {
    "raw": "copy-webpack-plugin@8.1.1",
    "scope": null,
    "escapedName": "copy-webpack-plugin",
    "name": "copy-webpack-plugin",
    "rawSpec": "8.1.1",
    "spec": "8.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/build-angular"
  ],
  "_resolved": "https://registry.npmjs.org/copy-webpack-plugin/-/copy-webpack-plugin-8.1.1.tgz",
  "_shasum": "3f697e162764925c2f0d235f380676125508fd26",
  "_shrinkwrap": null,
  "_spec": "copy-webpack-plugin@8.1.1",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular",
  "author": {
    "name": "Len Boyette"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/copy-webpack-plugin/issues"
  },
  "dependencies": {
    "fast-glob": "^3.2.5",
    "glob-parent": "^5.1.1",
    "globby": "^11.0.3",
    "normalize-path": "^3.0.0",
    "p-limit": "^3.1.0",
    "schema-utils": "^3.0.0",
    "serialize-javascript": "^5.0.1"
  },
  "description": "Copy files && directories with webpack",
  "devDependencies": {
    "@babel/cli": "^7.13.10",
    "@babel/core": "^7.13.10",
    "@babel/preset-env": "^7.13.12",
    "@commitlint/cli": "^12.0.1",
    "@commitlint/config-conventional": "^12.0.1",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-jest": "^26.6.3",
    "cross-env": "^7.0.2",
    "del": "^6.0.0",
    "del-cli": "^3.0.1",
    "eslint": "^7.22.0",
    "eslint-config-prettier": "^8.1.0",
    "eslint-plugin-import": "^2.22.1",
    "file-loader": "^6.1.1",
    "husky": "^5.2.0",
    "is-gzip": "^2.0.0",
    "jest": "^26.6.3",
    "lint-staged": "^10.5.4",
    "memfs": "^3.2.0",
    "mkdirp": "^1.0.4",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.1.2",
    "standard-version": "^9.1.1",
    "webpack": "^5.27.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-rYM2uzRxrLRpcyPqGceRBDpxxUV8vcDqIKxAUKfcnFpcrPxT5+XvhTxv7XLjo5AvEJFPdAE3zCogG2JVahqgSQ==",
    "shasum": "3f697e162764925c2f0d235f380676125508fd26",
    "tarball": "https://registry.npmjs.org/copy-webpack-plugin/-/copy-webpack-plugin-8.1.1.tgz",
    "fileCount": 8,
    "unpackedSize": 86042,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgbEomCRA9TVsSAnZWagAAWGUP/1mDA3+mgnBPj0dUdrsh\nRHIPu9F/4MhV38Xsf0YW1KB4QkNf0vkNxjgKiDjyUnW26DrB7C/hAoaC7Xzo\nvDnUKXVIspvQXltmjzwhzpBBuEzxRJ8Drom29L3M09iSLR2zHedPWPI7AQL+\nC74sotI+Dv8l57LECZztv6ZoeS6nNSVYshsmTlQd5JMmR5flDfeaoLEW9cLg\nHy/Ok7YcYl7D967G9oAzwu3T0GYEeChVi5wTNSTDtJXdLhuJjTr/qpwqoV+N\nfQqKe+xLFRmWUEcRox22JgOWGEqsHAQ3bQ9Jk6PIMndGbi8Jekp4jzRfcmoL\nSTaCSL+7Wuis+NDHFMqpX28S9Wiam4/BCmbP2ayE+vwyajPKgrOxiEWKs8gc\nRJ5IlfI3GzDR/95yGMRwUDHazWuwfW0syYRpYT+rGs7Ej1NO3KP1IXBPhlw0\nFsh1AzRt81eduy0gQpODXvds2vDvcTKJvWu6uYMU26cLEdH9lYgyDkAvTRfS\nhlFaMrIv5+RXQVKLeF6noOCvhz5LU03fEqq2RQS9xg+sLjVp+/E8V2P0ewvR\nVOakaEjKXh1WD6dnFsEt2N40uMG0nQ4sCdJsRFCOUd0J39M+qFDTokLYJTjl\nlQbu1BJIT4FcmzxkcP4igwLMDxbcSkrYPA/LOtm3xJmZEDN3K0Pyg7tD30gO\nPTSS\r\n=fMIY\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 10.13.0"
  },
  "files": [
    "dist"
  ],
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/webpack"
  },
  "gitHead": "885796885e0e2e624065d654ff69721c3fb2938f",
  "homepage": "https://github.com/webpack-contrib/copy-webpack-plugin",
  "keywords": [
    "webpack",
    "plugin",
    "transfer",
    "move",
    "copy"
  ],
  "license": "MIT",
  "main": "dist/cjs.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    },
    {
      "name": "michael-ciniawsky",
      "email": "michael.ciniawsky@gmail.com"
    },
    {
      "name": "kevlened",
      "email": "boyettel@gmail.com"
    },
    {
      "name": "d3viant0ne",
      "email": "wiens.joshua@gmail.com"
    },
    {
      "name": "evilebottnawi",
      "email": "sheo13666q@gmail.com"
    }
  ],
  "name": "copy-webpack-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^5.1.0"
  },
  "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# copy-webpack-plugin\n\nCopies individual files or entire directories, which already exist, to the build directory.\n\n## Getting Started\n\nTo begin, you'll need to install `copy-webpack-plugin`:\n\n```console\nnpm install copy-webpack-plugin --save-dev\n```\n\nThen add the plugin to your `webpack` config. For example:\n\n**webpack.config.js**\n\n```js\nconst CopyPlugin = require(\"copy-webpack-plugin\");\n\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        { from: \"source\", to: \"dest\" },\n        { from: \"other\", to: \"public\" },\n      ],\n    }),\n  ],\n};\n```\n\n> ℹ️ `copy-webpack-plugin` is not designed to copy files generated from the build process; rather, it is to copy files that already exist in the source tree, as part of the build process.\n\n> ℹ️ If you want `webpack-dev-server` to write files to the output directory during development, you can force it with the [`writeToDisk`](https://github.com/webpack/webpack-dev-middleware#writetodisk) option or the [`write-file-webpack-plugin`](https://github.com/gajus/write-file-webpack-plugin).\n\n> ℹ️ You can get the original source filename from [Asset Objects](https://webpack.js.org/api/stats/#asset-objects).\n\n## Options\n\nThe plugin's signature:\n\n**webpack.config.js**\n\n```js\nconst CopyPlugin = require(\"copy-webpack-plugin\");\n\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        { from: \"source\", to: \"dest\" },\n        { from: \"other\", to: \"public\" },\n      ],\n      options: {\n        concurrency: 100,\n      },\n    }),\n  ],\n};\n```\n\n### Patterns\n\n|                  Name                   |         Type         |                     Default                     | Description                                                                                                                                            |\n| :-------------------------------------: | :------------------: | :---------------------------------------------: | :----------------------------------------------------------------------------------------------------------------------------------------------------- |\n|             [`from`](#from)             |      `{String}`      |                   `undefined`                   | Glob or path from where we сopy files.                                                                                                                 |\n|               [`to`](#to)               | `{String\\|Function}` |            `compiler.options.output`            | Output path.                                                                                                                                           |\n|          [`context`](#context)          |      `{String}`      | `options.context \\|\\| compiler.options.context` | A path that determines how to interpret the `from` path.                                                                                               |\n|      [`globOptions`](#globoptions)      |      `{Object}`      |                   `undefined`                   | [Options][glob-options] passed to the glob pattern matching library including `ignore` option.                                                         |\n|           [`filter`](#filter)           |     `{Function}`     |                   `undefined`                   | Allows to filter copied assets.                                                                                                                        |\n|           [`toType`](#totype)           |      `{String}`      |                   `undefined`                   | Determinate what is `to` option - directory, file or template.                                                                                         |\n|            [`force`](#force)            |     `{Boolean}`      |                     `false`                     | Overwrites files already in `compilation.assets` (usually added by other plugins/loaders).                                                             |\n|         [`priority`](#priority)         |      `{Number}`      |                       `0`                       | Allows you to specify the copy priority.                                                                                                               |\n|        [`transform`](#transform)        |      `{Object}`      |                   `undefined`                   | Allows to modify the file contents. Enable `transform` caching. You can use `{ transform: {cache: { key: 'my-cache-key' }} }` to invalidate the cache. |\n|     [`transformAll`](#transformAll)     |     `{Function}`     |                   `undefined`                   | Allows you to modify the contents of multiple files and save the result to one file.                                                                   |\n| [`noErrorOnMissing`](#noerroronmissing) |     `{Boolean}`      |                     `false`                     | Doesn't generate an error on missing file(s).                                                                                                          |\n|             [`info`](#info)             | `{Object\\|Function}` |                   `undefined`                   | Allows to add assets info.                                                                                                                             |\n\n#### `from`\n\nType: `String`\nDefault: `undefined`\n\nGlob or path from where we сopy files.\nGlobs accept [fast-glob pattern-syntax](https://github.com/mrmlnc/fast-glob#pattern-syntax).\nGlob can only be a `string`.\n\n> ⚠️ Don't use directly `\\\\` in `from` option if it is a `glob` (i.e `path\\to\\file.ext`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        \"relative/path/to/file.ext\",\n        \"relative/path/to/dir\",\n        path.resolve(__dirname, \"src\", \"file.ext\"),\n        path.resolve(__dirname, \"src\", \"dir\"),\n        \"**/*\",\n        {\n          from: \"**/*\",\n        },\n        // If absolute path is a `glob` we replace backslashes with forward slashes, because only forward slashes can be used in the `glob`\n        path.posix.join(\n          path.resolve(__dirname, \"src\").replace(/\\\\/g, \"/\"),\n          \"*.txt\"\n        ),\n      ],\n    }),\n  ],\n};\n```\n\n##### `For windows`\n\nIf you define `from` as absolute file path or absolute folder path on `Windows`, you can use windows path segment (`\\\\`)\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.resolve(__dirname, \"file.txt\"),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nBut you should always use forward-slashes in `glob` expressions\nSee [fast-glob manual](https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows).\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          // If absolute path is a `glob` we replace backslashes with forward slashes, because only forward slashes can be used in the `glob`\n          from: path.posix.join(\n            path.resolve(__dirname, \"fixtures\").replace(/\\\\/g, \"/\"),\n            \"*.txt\"\n          ),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nThe `context` behaves differently depending on what the `from` is (`glob`, `file` or `dir`).\nMore [`examples`](#examples)\n\n#### `to`\n\nType: `String|Function`\nDefault: `compiler.options.output`\n\n##### String\n\nOutput path.\n\n> ⚠️ Don't use directly `\\\\` in `to` (i.e `path\\to\\dest`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/` or `path` methods.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"**/*\",\n          to: \"relative/path/to/dest/\",\n        },\n        {\n          from: \"**/*\",\n          to: \"/absolute/path/to/dest/\",\n        },\n        {\n          from: \"**/*\",\n          to: \"[path][name].[contenthash][ext]\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### Function\n\nAllows to modify the writing path.\n\n> ⚠️ Don't return directly `\\\\` in `to` (i.e `path\\to\\newFile`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/` or `path` methods.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to({ context, absoluteFilename }) {\n            return \"dest/newPath/[name][ext]\";\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to({ context, absoluteFilename }) {\n            return Promise.resolve(\"dest/newPath/[name][ext]\");\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `context`\n\nType: `String`\nDefault: `options.context|compiler.options.context`\n\nA path that determines how to interpret the `from` path.\n\n> ⚠️ Don't use directly `\\\\` in `context` (i.e `path\\to\\context`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/` or `path` methods.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.txt\",\n          to: \"dest/\",\n          context: \"app/\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\nThe `context` option can be an absolute or relative path. If `context` is a relative, then it is converted to absolute based to `compiler.options.context`\n\nAlso, `context` indicates how to interpret the search results. Further, he is considered in this role.\n\nTo determine the structure from which the found resources will be copied to the destination folder, the `context` option is used.\n\nIf `from` is a file, then `context` is equal to the directory in which this file is located. Accordingly, the result will be only the file name.\n\nIf `from` is a directory, then `context` is the same as `from` and is equal to the directory itself. In this case, the result will be a hierarchical structure of the found folders and files relative to the specified directory.\n\nIf `from` is a glob, then regardless of the `context` option, the result will be the structure specified in the `from` option\n\nMore [`examples`](#examples)\n\n#### `globOptions`\n\nType: `Object`\nDefault: `undefined`\n\nAllows to configute the glob pattern matching library used by the plugin. [See the list of supported options][glob-options]\nTo exclude files from the selection, you should use [globOptions.ignore option](https://github.com/mrmlnc/fast-glob#ignore)\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"public/**/*\",\n          globOptions: {\n            dot: true,\n            gitignore: true,\n            ignore: [\"**/file.*\", \"**/ignored-directory/**\"],\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `filter`\n\nType: `Function`\nDefault: `undefined`\n\n> ℹ️ To ignore files by path please use the [`globOptions.ignore`](#globoptions) option.\n\n**webpack.config.js**\n\n```js\nconst fs = require(\"fs\").promise;\n\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"public/**/*\",\n          filter: async (resourcePath) => {\n            const data = await fs.promises.readFile(resourcePath);\n            const content = data.toString();\n\n            if (content === \"my-custom-content\") {\n              return false;\n            }\n\n            return true;\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `toType`\n\nType: `String`\nDefault: `undefined`\n\nDeterminate what is `to` option - directory, file or template.\nSometimes it is hard to say what is `to`, example `path/to/dir-with.ext`.\nIf you want to copy files in directory you need use `dir` option.\nWe try to automatically determine the `type` so you most likely do not need this option.\n\n|       Name       |    Type    |   Default   | Description                                                                                          |\n| :--------------: | :--------: | :---------: | :--------------------------------------------------------------------------------------------------- |\n|   **`'dir'`**    | `{String}` | `undefined` | If `to` has no extension or ends on `'/'`                                                            |\n|   **`'file'`**   | `{String}` | `undefined` | If `to` is not a directory and is not a template                                                     |\n| **`'template'`** | `{String}` | `undefined` | If `to` contains [a template pattern](https://webpack.js.org/configuration/output/#template-strings) |\n\n##### `'dir'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"path/to/file.txt\",\n          to: \"directory/with/extension.ext\",\n          toType: \"dir\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### `'file'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"path/to/file.txt\",\n          to: \"file/without/extension\",\n          toType: \"file\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### `'template'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/\",\n          to: \"dest/[name].[contenthash][ext]\",\n          toType: \"template\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `force`\n\nType: `Boolean`\nDefault: `false`\n\nOverwrites files already in `compilation.assets` (usually added by other plugins/loaders).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/**/*\",\n          to: \"dest/\",\n          force: true,\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `priority`\n\nType: `Number`\nDefault: `0`\n\nAllows to specify the priority of copying files with the same destination name.\nFiles for patterns with higher priority will be copied later.\nTo overwrite files, the [`force`](#force) option must be enabled.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        // Сopied second and will overwrite \"dir_2/file.txt\"\n        {\n          from: \"dir_1/file.txt\",\n          to: \"newfile.txt\",\n          force: true,\n          priority: 10,\n        },\n        // Сopied first\n        {\n          from: \"dir_2/file.txt\",\n          to: \"newfile.txt\",\n          priority: 5,\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `transform`\n\nType: `Function|Object`\nDefault: `undefined`\n\nAllows to modify the file contents.\n\n##### `Function`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          // The `content` argument is a [`Buffer`](https://nodejs.org/api/buffer.html) object, it could be converted to a `String` to be processed using `content.toString()`\n          // The `absoluteFrom` argument is a `String`, it is absolute path from where the file is being copied\n          transform(content, absoluteFrom) {\n            return optimize(content);\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### `Object`\n\n|               Name                |        Type         |   Default   | Description                                                                                                      |\n| :-------------------------------: | :-----------------: | :---------: | :--------------------------------------------------------------------------------------------------------------- |\n| **[`transformer`](#transformer)** |    `{Function}`     | `undefined` | Allows to modify the file contents.                                                                              |\n|       **[`cache`](#cache)**       | `{Boolean\\|Object}` |   `false`   | Enable `transform` caching. You can use `transform: { cache: { key: 'my-cache-key' } }` to invalidate the cache. |\n\n###### `transformer`\n\nType: `Function`\nDefault: `undefined`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          // The `content` argument is a [`Buffer`](https://nodejs.org/api/buffer.html) object, it could be converted to a `String` to be processed using `content.toString()`\n          // The `absoluteFrom` argument is a `String`, it is absolute path from where the file is being copied\n          transform: {\n            transformer(content, absoluteFrom) {\n              return optimize(content);\n            },\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          transform: {\n            transformer(content, path) {\n              return Promise.resolve(optimize(content));\n            },\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n###### `cache`\n\nType: `Boolean|Object`\nDefault: `false`\n\n**webpack.config.js**\n\nEnable/disable and configure caching.\nDefault path to cache directory: `node_modules/.cache/copy-webpack-plugin`.\n\n###### `Boolean`\n\nEnables/Disable `transform` caching.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          transform: {\n            transformer(content, path) {\n              return optimize(content);\n            },\n            cache: true,\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### `Object`\n\nEnables `transform` caching and setup cache directory and invalidation keys.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          transform: {\n            transformer(content, path) {\n              return optimize(content);\n            },\n            cache: {\n              directory: path.resolve(__dirname, \"cache-directory\"),\n              keys: {\n                // May be useful for invalidating cache based on external values\n                // For example, you can invalid cache based on `process.version` - { node: process.version }\n                key: \"value\",\n              },\n            },\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\nYou can setup invalidation keys using a function.\n\nSimple function:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          transform: {\n            transformer(content, path) {\n              return optimize(content);\n            },\n            cache: {\n              directory: path.resolve(__dirname, \"cache-directory\"),\n              keys: (defaultCacheKeys, absoluteFrom) => {\n                const keys = getCustomCacheInvalidationKeysSync();\n\n                return {\n                  ...defaultCacheKeys,\n                  keys,\n                };\n              },\n            },\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\nAsync function:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          transform: {\n            transformer(content, path) {\n              return optimize(content);\n            },\n            cache: {\n              directory: path.resolve(__dirname, \"cache-directory\"),\n              keys: async (defaultCacheKeys, absoluteFrom) => {\n                const keys = await getCustomCacheInvalidationKeysAsync();\n\n                return {\n                  ...defaultCacheKeys,\n                  keys,\n                };\n              },\n            },\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `transformAll`\n\nType: `Function`\nDefault: `undefined`\n\nAllows you to modify the contents of multiple files and save the result to one file.\n\n> ℹ️ The `to` option must be specified and point to a file. It is allowed to use only `[contenthash]` and `[fullhash]` template strings.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/**/*.txt\",\n          to: \"dest/file.txt\",\n          // The `assets` argument is an assets array for the pattern.from (\"src/**/*.txt\")\n          transformAll(assets) {\n            const result = assets.reduce((accumulator, asset) => {\n              // The asset content can be obtained from `asset.source` using `source` method.\n              // The asset content is a [`Buffer`](https://nodejs.org/api/buffer.html) object, it could be converted to a `String` to be processed using `content.toString()`\n              const content = asset.data;\n\n              accumulator = `${accumulator}${content}\\n`;\n              return accumulator;\n            }, \"\");\n\n            return result;\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n### `noErrorOnMissing`\n\nType: `Boolean`\nDefault: `false`\n\nDoesn't generate an error on missing file(s);\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.resolve(__dirname, \"missing-file.txt\"),\n          noErrorOnMissing: true,\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `info`\n\nType: `Object|Function<Object>`\nDefault: `undefined`\n\nAllows to add assets info.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        \"relative/path/to/file.ext\",\n        {\n          from: \"**/*\",\n          // Terser skip this file for minimization\n          info: { minimized: true },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        \"relative/path/to/file.ext\",\n        {\n          from: \"**/*\",\n          // Terser skip this file for minimization\n          info: (file) => ({ minimized: true }),\n        },\n      ],\n    }),\n  ],\n};\n```\n\n### Options\n\n|             Name              |    Type    | Default | Description                                      |\n| :---------------------------: | :--------: | :-----: | :----------------------------------------------- |\n| [`concurrency`](#concurrency) | `{Number}` |  `100`  | Limits the number of simultaneous requests to fs |\n\n#### `concurrency`\n\nlimits the number of simultaneous requests to fs\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [...patterns],\n      options: { concurrency: 50 },\n    }),\n  ],\n};\n```\n\n### Examples\n\n#### Different variants `from` (`glob`, `file` or `dir`).\n\nTake for example the following file structure:\n\n```\nsrc/directory-nested/deep-nested/deepnested-file.txt\nsrc/directory-nested/nested-file.txt\n```\n\n##### From is a Glob\n\nEverything that you specify in `from` will be included in the result:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/directory-nested/**/*\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\nsrc/directory-nested/deep-nested/deepnested-file.txt,\nsrc/directory-nested/nested-file.txt\n```\n\nIf you want only content `src/directory-nested/`, you should only indicate `glob` in `from`. The path to the folder in which the search should take place, should be moved to `context`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"**/*\",\n          context: path.resolve(__dirname, \"src\", \"directory-nested\"),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\ndeep-nested/deepnested-file.txt,\nnested-file.txt\n```\n\n##### From is a Dir\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.resolve(__dirname, \"src\", \"directory-nested\"),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\ndeep-nested/deepnested-file.txt,\nnested-file.txt\n```\n\nTechnically, this is `**/*` with a predefined context equal to the specified directory.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"**/*\",\n          context: path.resolve(__dirname, \"src\", \"directory-nested\"),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\ndeep-nested/deepnested-file.txt,\nnested-file.txt\n```\n\n##### From is a File\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.resolve(\n            __dirname,\n            \"src\",\n            \"directory-nested\",\n            \"nested-file.txt\"\n          ),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\nnested-file.txt\n```\n\nTechnically, this is a filename with a predefined context equal to `path.dirname(pathToFile)`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"nested-file.txt\",\n          context: path.resolve(__dirname, \"src\", \"directory-nested\"),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\nnested-file.txt\n```\n\n#### Ignoring files\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.posix.join(\n            path.resolve(__dirname, \"src\").replace(/\\\\/g, \"/\"),\n            \"**/*\"\n          ),\n          globOptions: {\n            ignore: [\n              // Ignore all `txt` files\n              \"**/*.txt\",\n              // Ignore all files in all subdirectories\n              \"**/subdir/**\",\n            ],\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### Flatten copy\n\nRemoves all directory references and only copies file names.\n\n> ⚠️ If files have the same name, the result is non-deterministic.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/**/*\",\n          to: \"[name][ext]\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\nfile-1.txt\nfile-2.txt\nnested-file.txt\n```\n\n#### Copy in new directory\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          // When copying files starting with a dot, must specify the toType option\n          // toType: \"file\",\n          to({ context, absoluteFilename }) {\n            return `newdirectory/${path.relative(context, absoluteFilename)}`;\n          },\n          from: \"directory\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\n\"newdirectory/file-1.txt\",\n\"newdirectory/nestedfile.txt\",\n\"newdirectory/nested/deep-nested/deepnested.txt\",\n\"newdirectory/nested/nestedfile.txt\",\n```\n\n#### Skip running JavaScript files through a minimizer\n\nUseful if you need to simply copy `*.js` files to destination \"as is\" without evaluating and minimizing them using Terser.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        \"relative/path/to/file.ext\",\n        {\n          from: \"**/*\",\n          // Terser skip this file for minimization\n          info: { minimized: true },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### `yarn workspaces` and `monorepos`\n\nWhen using `yarn workspaces` or` monorepos`, relative copy paths from node_modules can be broken due to the way packages are hoisting.\nTo avoid this, should explicitly specify where to copy the files from using `require.resolve`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: `${path.dirname(\n            require.resolve(`${moduleName}/package.json`)\n          )}/target`,\n          to: \"target\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/copy-webpack-plugin.svg\n[npm-url]: https://npmjs.com/package/copy-webpack-plugin\n[node]: https://img.shields.io/node/v/copy-webpack-plugin.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/copy-webpack-plugin.svg\n[deps-url]: https://david-dm.org/webpack-contrib/copy-webpack-plugin\n[tests]: https://github.com/webpack-contrib/copy-webpack-plugin/workflows/copy-webpack-plugin/badge.svg\n[tests-url]: https://github.com/webpack-contrib/copy-webpack-plugin/actions\n[cover]: https://codecov.io/gh/webpack-contrib/copy-webpack-plugin/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/copy-webpack-plugin\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=copy-webpack-plugin\n[size-url]: https://packagephobia.now.sh/result?p=copy-webpack-plugin\n[glob-options]: https://github.com/sindresorhus/globby#options\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/copy-webpack-plugin.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
    "clean": "del-cli dist",
    "commitlint": "commitlint --from=master",
    "defaults": "webpack-defaults",
    "lint": "npm-run-all -l -p \"lint:**\"",
    "lint:js": "eslint --cache .",
    "lint:prettier": "prettier --list-different .",
    "prebuild": "npm run clean",
    "prepare": "husky install && npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "npm run test:coverage",
    "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
    "test:only": "cross-env NODE_ENV=test jest",
    "test:watch": "npm run test:only -- --watch"
  },
  "version": "8.1.1"
}
