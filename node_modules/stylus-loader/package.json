{
  "_args": [
    [
      {
        "raw": "stylus-loader@5.0.0",
        "scope": null,
        "escapedName": "stylus-loader",
        "name": "stylus-loader",
        "rawSpec": "5.0.0",
        "spec": "5.0.0",
        "type": "version"
      },
      "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular"
    ]
  ],
  "_from": "stylus-loader@5.0.0",
  "_hasShrinkwrap": false,
  "_id": "stylus-loader@5.0.0",
  "_location": "/stylus-loader",
  "_nodeVersion": "12.20.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/stylus-loader_5.0.0_1612279073170_0.6672448729244236"
  },
  "_npmUser": {
    "name": "evilebottnawi",
    "email": "sheo13666q@gmail.com"
  },
  "_npmVersion": "6.14.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stylus-loader@5.0.0",
    "scope": null,
    "escapedName": "stylus-loader",
    "name": "stylus-loader",
    "rawSpec": "5.0.0",
    "spec": "5.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/build-angular"
  ],
  "_resolved": "https://registry.npmjs.org/stylus-loader/-/stylus-loader-5.0.0.tgz",
  "_shasum": "d3f548887ab67808cc40d320079c44f8ffa3d9b8",
  "_shrinkwrap": null,
  "_spec": "stylus-loader@5.0.0",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular",
  "author": {
    "name": "Kyle Robinson Young",
    "email": "kyle@dontkry.com",
    "url": "http://dontkry.com"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/stylus-loader/issues"
  },
  "dependencies": {
    "fast-glob": "^3.2.5",
    "klona": "^2.0.4",
    "normalize-path": "^3.0.0"
  },
  "description": "Stylus loader for webpack",
  "devDependencies": {
    "@babel/cli": "^7.12.10",
    "@babel/core": "^7.12.10",
    "@babel/preset-env": "^7.12.11",
    "@commitlint/cli": "^11.0.0",
    "@commitlint/config-conventional": "^11.0.0",
    "@webpack-contrib/defaults": "^6.3.0",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-eslint": "^10.1.0",
    "babel-jest": "^26.6.3",
    "benchmark": "^2.1.4",
    "bootstrap-styl": "^5.0.9",
    "cross-env": "^7.0.3",
    "css-loader": "^5.0.1",
    "del": "^6.0.0",
    "del-cli": "^3.0.1",
    "eslint": "^7.19.0",
    "eslint-config-prettier": "^7.2.0",
    "eslint-plugin-import": "^2.22.1",
    "husky": "^4.3.8",
    "jest": "^26.6.3",
    "lint-staged": "^10.5.3",
    "memfs": "^3.2.0",
    "nib": "^1.1.2",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.2.1",
    "raw-loader": "^4.0.2",
    "standard-version": "^9.1.0",
    "style-loader": "^2.0.0",
    "stylus": "^0.54.8",
    "webpack": "^5.19.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-1OaGgixTgC8IAaMCodZXg7XYsfP1qU0UzTHDyPaWACUh34j9geJL4iA583tFJDOtfNUOfDLaBpUywc5MicQ1aA==",
    "shasum": "d3f548887ab67808cc40d320079c44f8ffa3d9b8",
    "tarball": "https://registry.npmjs.org/stylus-loader/-/stylus-loader-5.0.0.tgz",
    "fileCount": 8,
    "unpackedSize": 49676,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgGW0hCRA9TVsSAnZWagAAdXYP/06UIlb9EMWq3O/6JWRw\nZPX9OgfqLRV8RbhSXZK9c6q3SHqxo0p5dIBBhEWd6+BRh+Do7caHo+5Uen0u\nM80l7XYWv6ikEtCgOo9eF2BsJW3Cwvg2rnk9K+njDhvxGsabsPQvFrUfq7WY\nRB3pJ6XZWfUJg4RMNM/e2VW7OyqiBSJxeo3ujrhUiJ3YABHSk953AkHQS9AY\nc3FcAkL/R5V2grbV5m5LTysAmcC+j5sEauANrDuoGdfc4Sra9BHog96UE5is\nhfRp6tFDaetRR4ZBZQ1WX1ir6/scb3fq7U7B2arY11qapKhYT6gr8RgCDZpN\nR56lWq08L7iBCGvsHnAGZjo+DCqVy4r2QyB3j7a6++I94om8B6FjJBYW29YM\n8VUqdQQ2hIzVYEvGS8f2N7x3Jz5e5Db6heP4oKyJquhnJq7vemQM/x4thG8c\nVcK+d68/GpfX4KqXc5ppSflfYW0AbgrJzGBhGSITVg61XuWzTgs4wIyTsroT\nJC3xzvPN0AdlCcnIODYaZivTzUqX4S7IBGhx2rvaYPANJXNMafHD6MXJ+dNF\nybukxlORrRMOnxtPhov2+/PED6jsc0jcWIiCJEMJJwtZ2IjPhHIFjNxJQCox\n7fmmG4nIts1UkZL9NROuttjOlt+1sq9Z7JPkGAp69Ibw1wptaMLIwFRvVs/p\ny+uK\r\n=mMcB\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 10.13.0"
  },
  "files": [
    "dist"
  ],
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/webpack"
  },
  "gitHead": "b65700888deaab0b66f44bd1771db65335b87d29",
  "homepage": "https://github.com/webpack-contrib/stylus-loader",
  "keywords": [
    "webpack",
    "loader",
    "stylus"
  ],
  "license": "MIT",
  "main": "dist/cjs.js",
  "maintainers": [
    {
      "name": "shama",
      "email": "kyle@dontkry.com"
    },
    {
      "name": "mzgoddard",
      "email": "mzgoddard@gmail.com"
    },
    {
      "name": "evilebottnawi",
      "email": "sheo13666q@gmail.com"
    }
  ],
  "name": "stylus-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "stylus": ">=0.52.4",
    "webpack": "^5.0.0"
  },
  "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# stylus-loader\n\nA Stylus loader for webpack. Compiles Styl to CSS.\n\n## Getting Started\n\nTo begin, you'll need to install `stylus` and `stylus-loader`:\n\n```console\n$ npm install stylus stylus-loader --save-dev\n```\n\nThen add the loader to your `webpack` config. For example:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        loader: \"stylus-loader\", // compiles Styl to CSS\n      },\n    ],\n  },\n};\n```\n\nAnd run `webpack` via your preferred method.\n\n## Options\n\n|                   Name                    |         Type         |      Default       | Description                                              |\n| :---------------------------------------: | :------------------: | :----------------: | :------------------------------------------------------- |\n|   **[`stylusOptions`](#stylusOptions)**   | `{Object\\|Function}` |        `{}`        | Options for Stylus.                                      |\n|       **[`sourceMap`](#sourcemap)**       |     `{Boolean}`      | `compiler.devtool` | Enables/Disables generation of source maps.              |\n| **[`webpackImporter`](#webpackimporter)** |     `{Boolean}`      |       `true`       | Enables/Disables the default Webpack importer.           |\n|  **[`additionalData`](#additionalData)**  | `{String\\|Function}` |    `undefined`     | Prepends/Appends `Stylus` code to the actual entry file. |\n\n### `stylusOptions`\n\nType: `Object|Function`\nDefault: `{}`\n\nYou can pass any Stylus specific options to the `stylus-loader` through the `stylusOptions` property in the [loader options](https://webpack.js.org/configuration/module/#rule-options-rule-query).\nSee the [Stylus documentation](https://stylus-lang.com/docs/js.html).\nOptions in dash-case should use camelCase.\n\n#### `Object`\n\nUse an object to pass options through to Stylus.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n          },\n          {\n            loader: \"stylus-loader\",\n            options: {\n              stylusOptions: {\n                /**\n                 * Specify Stylus plugins to use. Plugins may be passed as\n                 * strings instead of importing them in your Webpack config.\n                 *\n                 * @type {(string|Function)[]}\n                 * @default []\n                 */\n                use: [\"nib\"],\n\n                /**\n                 * Add path(s) to the import lookup paths.\n                 *\n                 * @type {string[]}\n                 * @default []\n                 */\n                include: [path.join(__dirname, \"src/styl/config\")],\n\n                /**\n                 * Import the specified Stylus files/paths.\n                 *\n                 * @type {string[]}\n                 * @default []\n                 */\n                import: [\"nib\", path.join(__dirname, \"src/styl/mixins\")],\n\n                /**\n                 * Define Stylus variables or functions.\n                 *\n                 * @type {Array|Object}\n                 * @default {}\n                 */\n                // Array is the recommended syntax: [key, value, raw]\n                define: [\n                  [\"$development\", process.env.NODE_ENV === \"development\"],\n                  [\"rawVar\", 42, true],\n                ],\n                // Object is deprecated syntax (there is no possibility to specify \"raw')\n                // define: {\n                //   $development: process.env.NODE_ENV === 'development',\n                //   rawVar: 42,\n                // },\n\n                /**\n                 * Include regular CSS on @import.\n                 *\n                 * @type {boolean}\n                 * @default false\n                 */\n                includeCSS: false,\n\n                /**\n                 * Resolve relative url()'s inside imported files.\n                 *\n                 * @see https://stylus-lang.com/docs/js.html#stylusresolveroptions\n                 *\n                 * @type {boolean|Object}\n                 * @default { nocheck: true }\n                 */\n                resolveURL: true,\n                // resolveURL: { nocheck: true },\n\n                /**\n                 * Emits comments in the generated CSS indicating the corresponding Stylus line.\n                 *\n                 * @see https://stylus-lang.com/docs/executable.html\n                 *\n                 * @type {boolean}\n                 * @default false\n                 */\n                lineNumbers: true,\n\n                /**\n                 * Move @import and @charset to the top.\n                 *\n                 * @see https://stylus-lang.com/docs/executable.html\n                 *\n                 * @type {boolean}\n                 * @default false\n                 */\n                hoistAtrules: true,\n\n                /**\n                 * Compress CSS output.\n                 * In the \"production\" mode is `true` by default\n                 *\n                 * @see https://stylus-lang.com/docs/executable.html\n                 *\n                 * @type {boolean}\n                 * @default false\n                 */\n                compress: true,\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\nAllows setting the options passed through to Stylus based off of the loader context.\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              stylusOptions: (loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === \"styles/foo.styl\") {\n                  return {\n                    paths: [\"absolute/path/c\", \"absolute/path/d\"],\n                  };\n                }\n\n                return {\n                  paths: [\"absolute/path/a\", \"absolute/path/b\"],\n                };\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `sourceMap`\n\nType: `Boolean`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/i,\n        use: [\n          \"style-loader\",\n          {\n            loader: \"css-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: \"stylus-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `webpackImporter`\n\nType: `Boolean`\nDefault: `true`\n\nEnables/Disables the default Webpack importer.\n\nThis can improve performance in some cases.\nUse it with caution because aliases and `@import` at-rules starting with `~` will not work.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              webpackImporter: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `additionalData`\n\nType: `String|Function`\nDefault: `undefined`\n\nPrepends `Stylus` code before the actual entry file.\nIn this case, the `stylus-loader` will not override the source but just **prepend** the entry's content.\n\nThis is especially useful when some of your Stylus variables depend on the environment:\n\n> ℹ Since you're injecting code, this will break the source mappings in your entry file. Often there's a simpler solution than this, like multiple Stylus entry files.\n\n#### `String`\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              additionalData: `@env: ${process.env.NODE_ENV};`,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\n##### Sync\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              additionalData: (content, loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === \"styles/foo.styl\") {\n                  return \"value = 100px\" + content;\n                }\n\n                return \"value 200px\" + content;\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n##### Async\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              additionalData: async (content, loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === \"styles/foo.styl\") {\n                  return \"value = 100px\" + content;\n                }\n\n                return \"value 200px\" + content;\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### Normal usage\n\nChain the `stylus-loader` with the [`css-loader`](https://github.com/webpack-contrib/css-loader) and the [`style-loader`](https://github.com/webpack-contrib/style-loader) to immediately apply all styles to the DOM.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        use: [\n          {\n            loader: \"style-loader\", // creates style nodes from JS strings\n          },\n          {\n            loader: \"css-loader\", // translates CSS into CommonJS\n          },\n          {\n            loader: \"stylus-loader\", // compiles Stylus to CSS\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Source maps\n\nTo enable sourcemaps for CSS, you'll need to pass the `sourceMap` property in the loader's options. If this is not passed, the loader will respect the setting for webpack source maps, set in `devtool`.\n\n**webpack.config.js**\n\n```javascript\nmodule.exports = {\n  devtool: \"source-map\", // any \"source-map\"-like devtool is possible\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        use: [\n          \"style-loader\",\n          {\n            loader: \"css-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: \"stylus-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Using nib with stylus\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        use: [\n          {\n            loader: \"style-loader\", // creates style nodes from JS strings\n          },\n          {\n            loader: \"css-loader\", // translates CSS into CommonJS\n          },\n          {\n            loader: \"stylus-loader\", // compiles Stylus to CSS\n            options: {\n              stylusOptions: {\n                use: [require(\"nib\")()],\n                import: [\"nib\"],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Import JSON files\n\nStylus does not provide resolving capabilities in the `json` function.\nTherefore webpack resolver does not work for `.json` files.\nUse [`stylus resolver`](#stylus-resolver).\n\n**index.styl**\n\n```styl\n// Suppose the file is located here `node_modules/vars/vars.json`\njson('vars.json')\n\n@media queries-small\n  body\n    display nope\n\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl$/,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"stylus-loader\",\n            options: {\n              stylusOptions: {\n                // Specify the path. where to find files\n                paths: [\"node_modules/vars\"],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### In production\n\nUsually, it's recommended to extract the style sheets into a dedicated file in production using the [MiniCssExtractPlugin](https://github.com/webpack-contrib/mini-css-extract-plugin). This way your styles are not dependent on JavaScript.\n\n### webpack resolver\n\nWebpack provides an [advanced mechanism to resolve files](https://webpack.js.org/configuration/resolve/).\nThe `stylus-loader` applies the webpack resolver when processing queries.\nThus you can import your Stylus modules from `node_modules`.\n\n```styl\n@import 'bootstrap-styl/bootstrap/index.styl';\n```\n\nUsing `~` is deprecated and can be removed from your code (**we recommend it**), but we still support it for historical reasons.\nWhy you can removed it? The loader will first try to resolve `@import`/`@require` as relative, if it cannot be resolved, the loader will try to resolve `@import`/`@require` inside [`node_modules`](https://webpack.js.org/configuration/resolve/#resolve-modules).\nJust prepend them with a `~` which tells webpack to look up the [`modules`](https://webpack.js.org/configuration/resolve/#resolve-modules).\n\n```styl\n@import \"~bootstrap-styl/bootstrap/index.styl\";\n```\n\nIt's important to only prepend it with `~`, because `~/` resolves to the home-directory.\nWebpack needs to distinguish between `bootstrap` and `~bootstrap`, because CSS and Styl files have no special syntax for importing relative files.\nWriting `@import \"file\"` is the same as `@import \"./file\";`\n\n### Stylus resolver\n\nIf you specify the `paths` option, modules will be searched in the given `paths`.\nThis is Stylus default behavior.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styl/,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n          },\n          {\n            loader: \"stylus-loader\",\n            options: {\n              stylusOptions: {\n                paths: [path.resolve(__dirname, \"node_modules\")],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Extracting style sheets\n\nBundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or [hot module replacement](https://webpack.js.org/concepts/hot-module-replacement/) in development. In production, on the other hand, it's not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a [FOUC](https://en.wikipedia.org/wiki/Flash_of_unstyled_content) might be visible. Thus it's often still better to have them as separate files in your final production build.\n\nThere are two possibilities to extract a style sheet from the bundle:\n\n- [`extract-loader`](https://github.com/peerigon/extract-loader) (simpler, but specialized on the css-loader's output)\n- [MiniCssExtractPlugin](https://github.com/webpack-contrib/mini-css-extract-plugin) (more complex, but works in all use-cases)\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/stylus-loader.svg\n[npm-url]: https://npmjs.com/package/stylus-loader\n[node]: https://img.shields.io/node/v/stylus-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/stylus-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/stylus-loader\n[tests]: https://github.com/webpack-contrib/stylus-loader/workflows/stylus-loader/badge.svg\n[tests-url]: https://github.com/webpack-contrib/stylus-loader/actions\n[cover]: https://codecov.io/gh/webpack-contrib/stylus-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/stylus-loader\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=stylus-loader\n[size-url]: https://packagephobia.now.sh/result?p=stylus-loader\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/stylus-loader.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
    "clean": "del-cli dist",
    "commitlint": "commitlint --from=master",
    "defaults": "webpack-defaults",
    "lint": "npm-run-all -l -p \"lint:**\"",
    "lint:js": "eslint --cache .",
    "lint:prettier": "prettier \"{**/*,*}.{js,json,md,yml,css,ts}\" --list-different",
    "prebuild": "npm run clean",
    "prepare": "npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "npm run test:coverage",
    "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
    "test:only": "cross-env NODE_ENV=test jest",
    "test:watch": "npm run test:only -- --watch"
  },
  "version": "5.0.0"
}
