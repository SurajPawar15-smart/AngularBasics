{
  "_args": [
    [
      {
        "raw": "watchpack@^2.2.0",
        "scope": null,
        "escapedName": "watchpack",
        "name": "watchpack",
        "rawSpec": "^2.2.0",
        "spec": ">=2.2.0 <3.0.0",
        "type": "range"
      },
      "c:\\Angular\\TaskManager\\node_modules\\webpack"
    ]
  ],
  "_from": "watchpack@^2.2.0",
  "_hasShrinkwrap": false,
  "_id": "watchpack@2.2.0",
  "_location": "/watchpack",
  "_nodeVersion": "14.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/watchpack_2.2.0_1621437490417_0.8653218606104618"
  },
  "_npmUser": {
    "name": "sokra",
    "email": "tobias.koppers@googlemail.com"
  },
  "_npmVersion": "6.14.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "watchpack@^2.2.0",
    "scope": null,
    "escapedName": "watchpack",
    "name": "watchpack",
    "rawSpec": "^2.2.0",
    "spec": ">=2.2.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webpack"
  ],
  "_resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.2.0.tgz",
  "_shasum": "47d78f5415fe550ecd740f99fe2882323a58b1ce",
  "_shrinkwrap": null,
  "_spec": "watchpack@^2.2.0",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\webpack",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/watchpack/issues"
  },
  "dependencies": {
    "glob-to-regexp": "^0.4.1",
    "graceful-fs": "^4.1.2"
  },
  "description": "Wrapper library for directory and file watching.",
  "devDependencies": {
    "coveralls": "^3.0.0",
    "eslint": "^5.11.1",
    "eslint-config-prettier": "^4.3.0",
    "eslint-plugin-prettier": "^3.1.0",
    "istanbul": "^0.4.3",
    "mocha": "^5.0.1",
    "prettier": "^1.11.0",
    "rimraf": "^2.6.2",
    "should": "^8.3.1",
    "write-file-atomic": "^3.0.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-up4YAn/XHgZHIxFBVCdlMiWDj6WaLKpwVeGQk2I5thdYxF/KmF0aaz6TfJZ/hfl1h/XlcDr7k1KH7ThDagpFaA==",
    "shasum": "47d78f5415fe550ecd740f99fe2882323a58b1ce",
    "tarball": "https://registry.npmjs.org/watchpack/-/watchpack-2.2.0.tgz",
    "fileCount": 9,
    "unpackedSize": 56056,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgpSwzCRA9TVsSAnZWagAAOAUP/jEfdnIbtaB677xdL7Es\n87xF1CMNalC3ey0pwxs3i72CCxj2E/y+wduWCbFECMIQJx8Jr8CNI7k0AWIf\nOtVNTbffWOt/jyDfT0ztnNCJ6eOuU93y+ZF6t7eLx53aPFL1hOSW1ZFDVMA8\n7xSKPmy9BiWdpkmbgZYldxsi1DEtLSJuZgLWnNqKewyx/ZNpIIBnMHmM95jy\nL5hAa1R2GuPqsenj/3DMDT70sYOtMEQKJ2+FgCmTeoHwHeNp6dom2G+V3YyB\niNmoK/85yXYZnaocGXFjzmUzJ2NIIwy+SMVjUYA5mf4yi8+O9dl51OOgX451\nRMIwADostp/cMXVxNS8ntcRDtXCkdNEXboczGinDL5Uk2GEVv+oDd0P6u1Ob\n3TinjTcW8reZZykesLzT2wDPwM9HenaYt6nkCFUl79k5knq/w81JayCOS7O/\nEt9qR+49fhNuRuOICFE7kGe98qg2j1YcQbw234nDaKFMO2NaGG3CTfU8iX2v\n9bspRXoOaTYzDvp1ihuhLC7sW+2aDHA0/6rAKX45t7+xM/X/TnktlcVGxZvA\nVKxcsjDt9sgoQ3M2dXHJfuVs/W5oDItap1P89y6h39x1aDzxya78BZMPNmXb\npbLP1UBiLORpnNuUO4nCC9Qbhp6745Uffo2+Fn4Aw1EX3svgbPXETg2+gjk1\ntNmA\r\n=X7NJ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=10.13.0"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "22fc0ac97d604cd01fe0717a84253d942a7467c1",
  "homepage": "https://github.com/webpack/watchpack",
  "license": "MIT",
  "main": "./lib/watchpack.js",
  "maintainers": [
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    }
  ],
  "name": "watchpack",
  "optionalDependencies": {},
  "readme": "# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000,\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true,\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tfollowSymlinks: true,\n\t// true: follows symlinks and watches symlinks and real files\n\t//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)\n\t// false (default): watches only specified item they may be real files or symlinks\n\t//   (This makes sense when symlinks has already been resolved)\n\n\tignored: \"**/.git\"\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// ignored: /regexp/ - a regular expression for files or folders that should not be watched\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch({\n//   files: Iterable<string>,\n//   directories: Iterable<string>,\n//   missing: Iterable<string>,\n//   startTime?: number\n// })\nwp.watch({\n\tfiles: listOfFiles,\n\tdirectories: listOfDirectories,\n\tmissing: listOfNotExistingItems,\n\tstartTime: Date.now() - 10000\n});\n// starts watching these files and directories\n// calling this again will override the files and directories\n// files: can be files or directories, for files: content and existence changes are tracked\n//        for directories: only existence and timestamp changes are tracked\n// directories: only directories, directory content (and content of children, ...) and\n//              existence changes are tracked.\n//              assumed to exist, when directory is not found without further information a remove event is emitted\n// missing: can be files or directorees,\n//          only existence changes are tracked\n//          expected to not exist, no remove event is emitted when not found initially\n// files and directories are assumed to exist, when they are not found without further information a remove event is emitted\n// missing is assumed to not exist and no remove event is emitted\n\nwp.on(\"change\", function(filePath, mtime, explanation) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"remove\", function(filePath, explanation) {\n\t// filePath: the removed file or directory\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n\t// watchpack gives up ownership on these Sets.\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n// The watcher will keep aggregating events\n// which can be received with getAggregated()\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getAggregated(): { changes: Set<string>, removals: Set<string> }\nconst { changes, removals } = wp.getAggregated();\n// returns the current aggregated info and removes that from the watcher\n// The next aggregated event won't include that info and will only emitted\n// when futher changes happen\n// Can also be used when paused.\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: a point in time at which it is safe to say all changes happened before that\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack/watchpack.git"
  },
  "scripts": {
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "lint": "eslint lib",
    "precover": "yarn lint",
    "pretest": "yarn lint",
    "pretty-files": "prettier \"lib/**.*\" \"test/**/*.js\" --write",
    "test": "mocha"
  },
  "version": "2.2.0"
}
