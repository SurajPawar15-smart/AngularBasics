{
  "_args": [
    [
      {
        "raw": "enhanced-resolve@^5.8.0",
        "scope": null,
        "escapedName": "enhanced-resolve",
        "name": "enhanced-resolve",
        "rawSpec": "^5.8.0",
        "spec": ">=5.8.0 <6.0.0",
        "type": "range"
      },
      "c:\\Angular\\TaskManager\\node_modules\\webpack"
    ]
  ],
  "_from": "enhanced-resolve@^5.8.0",
  "_hasShrinkwrap": false,
  "_id": "enhanced-resolve@5.8.2",
  "_location": "/webpack/enhanced-resolve",
  "_nodeVersion": "14.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/enhanced-resolve_5.8.2_1620663089927_0.9180238901389002"
  },
  "_npmUser": {
    "name": "sokra",
    "email": "tobias.koppers@googlemail.com"
  },
  "_npmVersion": "6.14.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "enhanced-resolve@^5.8.0",
    "scope": null,
    "escapedName": "enhanced-resolve",
    "name": "enhanced-resolve",
    "rawSpec": "^5.8.0",
    "spec": ">=5.8.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webpack"
  ],
  "_resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.8.2.tgz",
  "_shasum": "15ddc779345cbb73e97c611cd00c01c1e7bf4d8b",
  "_shrinkwrap": null,
  "_spec": "enhanced-resolve@^5.8.0",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\webpack",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "browser": {
    "pnpapi": false,
    "process": "./lib/util/process-browser.js"
  },
  "bugs": {
    "url": "https://github.com/webpack/enhanced-resolve/issues"
  },
  "dependencies": {
    "graceful-fs": "^4.2.4",
    "tapable": "^2.2.0"
  },
  "description": "Offers a async require.resolve function. It's highly configurable.",
  "devDependencies": {
    "@types/mocha": "^8.0.3",
    "@types/node": "^14.11.1",
    "eslint": "^7.9.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-jsdoc": "^30.5.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^3.1.4",
    "husky": "^4.3.0",
    "lint-staged": "^10.4.0",
    "memfs": "^3.2.0",
    "mocha": "^8.1.3",
    "nyc": "^15.1.0",
    "prettier": "^2.1.2",
    "should": "^13.2.3",
    "tooling": "github:webpack/tooling#v1.14.0",
    "typescript": "^4.2.0-beta"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-F27oB3WuHDzvR2DOGNTaYy0D5o0cnrv8TeI482VM4kYgQd/FT9lUQwuNsJ0oOHtBUq7eiW5ytqzp7nBFknL+GA==",
    "shasum": "15ddc779345cbb73e97c611cd00c01c1e7bf4d8b",
    "tarball": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.8.2.tgz",
    "fileCount": 45,
    "unpackedSize": 157326,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgmVsyCRA9TVsSAnZWagAAVcgP/1pyFTxNZqaadt/wyDdu\nIIiiPPfvPyK+5ATrexV4FbOHPO4C3d/CdUCQV1WBXQzpM0b5jT5TGsWjOBhI\noAHSxJjdkyInQlpC2Ld/e4aO0B8k9Enzycz/t+kM67BpAtn0TNhiJw4ujmGo\nSAZ8JI1QCvh0aB2ONj3SfDh+4w0/auNmWfLh2TBOHVC6RxDIDaEKYkVBOZrn\nZTEddo1zUVP1VXliIKrdWxKuoUO6XewD1clwiAjjI3SaR0bjCEuPFIZjPUCq\nlXdAHXPqaDKyQq9s4fMaG8gWkcoRpEEg5FBgi1kBgo/Q+6BtoFeqr1G2mz2K\ndIphED1tEDd4G8WJCGYpY4xOQB/6dG5D/2PG6dDH3Qv7qLrnmQqS+V0rkGh7\n0aB0Jfb9tNk2chmykOAW/9K2vwFyTRxxV0rl97dgPOY1EM3VSATEvgXCFuUL\nSr4Wdk/mGm4SzMJdb+rbyqEUB/EoVLBMPXdh7FBbpd5BV/UpaAExcZjZ1Jnw\nHSzXPn/47sndoC4DxZlvAPUA7wcKbI+sIBHMJcecd0pcP9RPp8hcn4KolaTQ\nkKYLyKOgb1tGl3NVaqqLj3ghaic2ZAIqOCN53DdIsDF5jqRp22P5DhxvfhCB\nN62x3iLigrpyKFYPr0TrdeOdFD4hIWabXWc3lSUF3O2hKA+8zlYQIPwxoGnc\n3cjd\r\n=TMu2\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=10.13.0"
  },
  "files": [
    "lib",
    "types.d.ts",
    "LICENSE"
  ],
  "gitHead": "60d79f3c93304ce5ecbbe0127aa583d4a73bf1a1",
  "homepage": "http://github.com/webpack/enhanced-resolve",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --cache"
    ]
  },
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "thelarkinn",
      "email": "sean.larkin@cuw.edu"
    }
  ],
  "name": "enhanced-resolve",
  "optionalDependencies": {},
  "readme": "# enhanced-resolve\n\nOffers an async require.resolve function. It's highly configurable.\n\n## Features\n\n- plugin system\n- provide a custom filesystem\n- sync and async node.js filesystems included\n\n## Getting Started\n\n### Install\n\n```sh\n# npm\nnpm install enhanced-resolve\n# or Yarn\nyarn add enhanced-resolve\n```\n\n### Resolve\n\nThere is a Node.js API which allows to resolve requests according to the Node.js resolving rules.\nSync and async APIs are offered. A `create` method allows to create a custom resolve function.\n\n```js\nconst resolve = require(\"enhanced-resolve\");\n\nresolve(\"/some/path/to/folder\", \"module/dir\", (err, result) => {\n\tresult; // === \"/some/path/node_modules/module/dir/index.js\"\n});\n\nresolve.sync(\"/some/path/to/folder\", \"../../dir\");\n// === \"/some/path/dir/index.js\"\n\nconst myResolve = resolve.create({\n\t// or resolve.create.sync\n\textensions: [\".ts\", \".js\"]\n\t// see more options below\n});\n\nmyResolve(\"/some/path/to/folder\", \"ts-module\", (err, result) => {\n\tresult; // === \"/some/node_modules/ts-module/index.ts\"\n});\n```\n\n### Creating a Resolver\n\nThe easiest way to create a resolver is to use the `createResolver` function on `ResolveFactory`, along with one of the supplied File System implementations.\n\n```js\nconst fs = require(\"fs\");\nconst { CachedInputFileSystem, ResolverFactory } = require(\"enhanced-resolve\");\n\n// create a resolver\nconst myResolver = ResolverFactory.createResolver({\n\t// Typical usage will consume the `fs` + `CachedInputFileSystem`, which wraps Node.js `fs` to add caching.\n\tfileSystem: new CachedInputFileSystem(fs, 4000),\n\textensions: [\".js\", \".json\"]\n\t/* any other resolver options here. Options/defaults can be seen below */\n});\n\n// resolve a file with the new resolver\nconst context = {};\nconst resolveContext = {};\nconst lookupStartPath = \"/Users/webpack/some/root/dir\";\nconst request = \"./path/to-look-up.js\";\nmyResolver.resolve({}, lookupStartPath, request, resolveContext, (\n\terr /*Error*/,\n\tfilepath /*string*/\n) => {\n\t// Do something with the path\n});\n```\n\n#### Resolver Options\n\n| Field            | Default                     | Description                                                                                                                                               |\n| ---------------- | --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| alias            | []                          | A list of module alias configurations or an object which maps key to value                                                                                |\n| aliasFields      | []                          | A list of alias fields in description files                                                                                                               |\n| cachePredicate   | function() { return true }; | A function which decides whether a request should be cached or not. An object is passed to the function with `path` and `request` properties.             |\n| cacheWithContext | true                        | If unsafe cache is enabled, includes `request.context` in the cache key                                                                                   |\n| conditionNames   | [\"node\"]                    | A list of exports field condition names                                                                                                                   |\n| descriptionFiles | [\"package.json\"]            | A list of description files to read from                                                                                                                  |\n| enforceExtension | false                       | Enforce that a extension from extensions must be used                                                                                                     |\n| exportsFields    | [\"exports\"]                 | A list of exports fields in description files                                                                                                             |\n| extensions       | [\".js\", \".json\", \".node\"]   | A list of extensions which should be tried for files                                                                                                      |\n| fileSystem       |                             | The file system which should be used                                                                                                                      |\n| fullySpecified   | false                       | Request passed to resolve is already fully specified and extensions or main files are not resolved for it (they are still resolved for internal requests) |\n| mainFields       | [\"main\"]                    | A list of main fields in description files                                                                                                                |\n| mainFiles        | [\"index\"]                   | A list of main files in directories                                                                                                                       |\n| modules          | [\"node_modules\"]            | A list of directories to resolve modules from, can be absolute path or folder name                                                                        |\n| plugins          | []                          | A list of additional resolve plugins which should be applied                                                                                              |\n| resolver         | undefined                   | A prepared Resolver to which the plugins are attached                                                                                                     |\n| resolveToContext | false                       | Resolve to a context instead of a file                                                                                                                    |\n| preferRelative   | false                       | Prefer to resolve module requests as relative request and fallback to resolving as module                                                                 |\n| preferAbsolute   | false                       | Prefer to resolve server-relative urls as absolute paths before falling back to resolve in roots                                                          |\n| restrictions     | []                          | A list of resolve restrictions                                                                                                                            |\n| roots            | []                          | A list of root paths                                                                                                                                      |\n| symlinks         | true                        | Whether to resolve symlinks to their symlinked location                                                                                                   |\n| unsafeCache      | false                       | Use this cache object to unsafely cache the successful requests                                                                                           |\n\n## Plugins\n\nSimilar to `webpack`, the core of `enhanced-resolve` functionality is implemented as individual plugins that are executed using [`tapable`](https://github.com/webpack/tapable).\nThese plugins can extend the functionality of the library, adding other ways for files/contexts to be resolved.\n\nA plugin should be a `class` (or its ES5 equivalent) with an `apply` method. The `apply` method will receive a `resolver` instance, that can be used to hook in to the event system.\n\n### Plugin Boilerplate\n\n```js\nclass MyResolverPlugin {\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"MyResolverPlugin\", (request, resolveContext, callback) => {\n\t\t\t\t// Any logic you need to create a new `request` can go here\n\t\t\t\tresolver.doResolve(target, request, null, resolveContext, callback);\n\t\t\t});\n\t}\n}\n```\n\nPlugins are executed in a pipeline, and register which event they should be executed before/after. In the example above, `source` is the name of the event that starts the pipeline, and `target` is what event this plugin should fire, which is what continues the execution of the pipeline. For an example of how these different plugin events create a chain, see `lib/ResolverFactory.js`, in the `//// pipeline ////` section.\n\n## Escaping\n\nIt's allowed to escape `#` as `\\0#` to avoid parsing it as fragment.\n\nenhanced-resolve will try to resolve requests containing `#` as path and as fragment, so it will automatically figure out if `./some#thing` means `.../some.js#thing` or `.../some#thing.js`. When a `#` is resolved as path it will be escaped in the result. Here: `.../some\\0#thing.js`.\n\n## Tests\n\n```javascript\nnpm test\n```\n\n[![Build Status](https://secure.travis-ci.org/webpack/enhanced-resolve.png?branch=main)](http://travis-ci.org/webpack/enhanced-resolve)\n\n## Passing options from webpack\n\nIf you are using `webpack`, and you want to pass custom options to `enhanced-resolve`, the options are passed from the `resolve` key of your webpack configuration e.g.:\n\n```\nresolve: {\n  extensions: ['.js', '.jsx'],\n  modules: [path.resolve(__dirname, 'src'), 'node_modules'],\n  plugins: [new DirectoryNamedWebpackPlugin()]\n  ...\n},\n```\n\n## License\n\nCopyright (c) 2012-2019 JS Foundation and other contributors\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/webpack/enhanced-resolve.git"
  },
  "scripts": {
    "code-lint": "eslint --cache lib test",
    "code-lint-fix": "eslint --cache lib test --fix",
    "cover": "nyc --reporter=html node node_modules/mocha/bin/_mocha --full-trace --check-leaks",
    "cover:ci": "nyc --reporter=lcovonly node node_modules/mocha/bin/_mocha --full-trace --check-leaks",
    "fix": "yarn run code-lint-fix && yarn run special-lint-fix",
    "lint": "yarn run code-lint && yarn run type-lint && yarn run special-lint",
    "precover": "yarn lint",
    "pretest": "yarn lint",
    "pretty": "prettier --loglevel warn --write \"lib/**/*.{js,json}\" \"test/*.js\"",
    "special-lint": "node node_modules/tooling/lockfile-lint && node node_modules/tooling/inherit-types && node node_modules/tooling/format-file-header && node node_modules/tooling/generate-types",
    "special-lint-fix": "node node_modules/tooling/inherit-types --write && node node_modules/tooling/format-file-header --write && node node_modules/tooling/generate-types --write",
    "test": "mocha --full-trace --check-leaks",
    "test:only": "mocha --full-trace --check-leaks",
    "type-lint": "tsc"
  },
  "types": "types.d.ts",
  "version": "5.8.2"
}
