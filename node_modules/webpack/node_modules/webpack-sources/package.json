{
  "_args": [
    [
      {
        "raw": "webpack-sources@^2.3.0",
        "scope": null,
        "escapedName": "webpack-sources",
        "name": "webpack-sources",
        "rawSpec": "^2.3.0",
        "spec": ">=2.3.0 <3.0.0",
        "type": "range"
      },
      "c:\\Angular\\TaskManager\\node_modules\\webpack"
    ]
  ],
  "_from": "webpack-sources@^2.3.0",
  "_hasShrinkwrap": false,
  "_id": "webpack-sources@2.3.0",
  "_location": "/webpack/webpack-sources",
  "_nodeVersion": "16.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/webpack-sources_2.3.0_1622109709999_0.2033264264455399"
  },
  "_npmUser": {
    "name": "sokra",
    "email": "tobias.koppers@googlemail.com"
  },
  "_npmVersion": "7.13.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "webpack-sources@^2.3.0",
    "scope": null,
    "escapedName": "webpack-sources",
    "name": "webpack-sources",
    "rawSpec": "^2.3.0",
    "spec": ">=2.3.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webpack"
  ],
  "_resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-2.3.0.tgz",
  "_shasum": "9ed2de69b25143a4c18847586ad9eccb19278cfa",
  "_shrinkwrap": null,
  "_spec": "webpack-sources@^2.3.0",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\webpack",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/webpack-sources/issues"
  },
  "dependencies": {
    "source-list-map": "^2.0.1",
    "source-map": "^0.6.1"
  },
  "description": "Source code handling classes for webpack",
  "devDependencies": {
    "coveralls": "^3.0.2",
    "eslint": "^7.7.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-jest": "^23.20.0",
    "eslint-plugin-mocha": "^8.0.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-nodeca": "^1.0.3",
    "eslint-plugin-prettier": "^3.0.1",
    "istanbul": "^0.4.1",
    "jest": "^26.4.0",
    "prettier": "^2.0.5",
    "sourcemap-validator": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-WyOdtwSvOML1kbgtXbTDnEW0jkJ7hZr/bDByIwszhWd/4XX1A3XMkrbFMsuH4+/MfLlZCUzlAdg4r7jaGKEIgQ==",
    "shasum": "9ed2de69b25143a4c18847586ad9eccb19278cfa",
    "tarball": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-2.3.0.tgz",
    "fileCount": 16,
    "unpackedSize": 58858,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgr24OCRA9TVsSAnZWagAAJGIP/R1bug+6ILOUyUnMknAQ\nE0e66Cm/hvn8/z33Cbqf1x0ZqJ6IzL3BmjYioB8NYx/2Y0LVWhQfEg2e1wTX\nFBbO7X4Hr/hEewmEu4+FzF7h0XxKWA7raoUOnxZL4X7lNMNUlVaC7tMSR8f/\nmfjfKi2HI1mX9LaXvwDJSv2JnMQcounh/WOK/DVbJG348tPI6BgfW4qKIurS\nLtTawcG0PRin4/E84NmhaPtQL0HiLWNvNei/dKC1rCsE0nWr1+7cPOX+55dm\nb/7WxNvjseTabj07GrnQK8R1JBDSJk/7udTCRY5jCyodd1ISD2VpDdd/kfBP\nD0DmkEnYfdp/srzAnCQY8em+9t0GV6z3LUD9WiFtKTE6z7cOrAo7k7MkGA8d\nxP92pqoOl5Wi2X0y9L0cDEYr/mLIFy35BEELDew4F6a4qCTxQjPCNgQf+UW3\nMIIh4jHLq0HcpphsaSTHgiPITKBvMVoCPPeSfK4Gob4jlXYP9Yil8oRc5BDO\nuAq37P2PSLH+G9rEircDhl05BFzif9z1aTnruRSUCoO205+TxfDyrHZnAMH4\n1iAYdBrXN3udSyZuqgKbsfnzkbxKR1C6qc6KYnWYCmMnmDnZlS1alBrRwIKE\ncXZUwwSpFdMKdBQwlpSTiEeBFpfhT4waGsWaP2Ro+d3vxs1kFxOOSQnBMTcQ\nhpTO\r\n=VceV\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=10.13.0"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "f943746ba8cd15f263dfe82ad5dc4470752618ab",
  "homepage": "https://github.com/webpack/webpack-sources#readme",
  "jest": {
    "forceExit": true,
    "testMatch": [
      "<rootDir>/test/*.js"
    ],
    "transformIgnorePatterns": [
      "<rootDir>"
    ],
    "testEnvironment": "node"
  },
  "keywords": [
    "webpack",
    "source-map"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "thelarkinn",
      "email": "sean.larkin@cuw.edu"
    },
    {
      "name": "spacek33z",
      "email": "kees@webduck.nl"
    }
  ],
  "name": "webpack-sources",
  "optionalDependencies": {},
  "readme": "# webpack-sources\n\nContains multiple classes which represent a `Source`. A `Source` can be asked for source code, size, source map and hash.\n\n## `Source`\n\nBase class for all sources.\n\n### Public methods\n\nAll methods should be considered as expensive as they may need to do computations.\n\n#### `source`\n\n```typescript\nSource.prototype.source() -> String | Buffer\n```\n\nReturns the represented source code as string or Buffer (for binary Sources).\n\n#### `buffer`\n\n```typescript\nSource.prototype.buffer() -> Buffer\n```\n\nReturns the represented source code as Buffer. Strings are converted to utf-8.\n\n#### `size`\n\n```typescript\nSource.prototype.size() -> Number\n```\n\nReturns the size in bytes of the represented source code.\n\n#### `map`\n\n```typescript\nSource.prototype.map(options?: Object) -> Object | null\n```\n\nReturns the SourceMap of the represented source code as JSON. May return `null` if no SourceMap is available.\n\nThe `options` object can contain the following keys:\n\n- `columns: Boolean` (default `true`): If set to false the implementation may omit mappings for columns.\n- `module: Boolean` (default `true`): If set to false the implementation may omit inner mappings for modules.\n\n#### `sourceAndMap`\n\n```typescript\nSource.prototype.sourceAndMap(options?: Object) -> {\n\tsource: String | Buffer,\n\tmap: Object | null\n}\n```\n\nReturns both, source code (like `Source.prototype.source()` and SourceMap (like `Source.prototype.map()`). This method could have better performance than calling `source()` and `map()` separately.\n\nSee `map()` for `options`.\n\n#### `updateHash`\n\n```typescript\nSource.prototype.updateHash(hash: Hash) -> void\n```\n\nUpdates the provided `Hash` object with the content of the represented source code. (`Hash` is an object with an `update` method, which is called with string values)\n\n## `RawSource`\n\nRepresents source code without SourceMap.\n\n```typescript\nnew RawSource(sourceCode: String)\n```\n\n## `OriginalSource`\n\nRepresents source code, which is a copy of the original file.\n\n```typescript\nnew OriginalSource(\n\tsourceCode: String,\n\tname: String\n)\n```\n\n- `sourceCode`: The source code.\n- `name`: The filename of the original source code.\n\nOriginalSource tries to create column mappings if requested, by splitting the source code at typical statement borders (`;`, `{`, `}`).\n\n## `SourceMapSource`\n\nRepresents source code with SourceMap, optionally having an additional SourceMap for the original source.\n\n```typescript\nnew SourceMapSource(\n\tsourceCode: String,\n\tname: String,\n\tsourceMap: Object | String,\n\toriginalSource?: String,\n\tinnerSourceMap?: Object | String,\n\tremoveOriginalSource?: boolean\n)\n```\n\n- `sourceCode`: The source code.\n- `name`: The filename of the original source code.\n- `sourceMap`: The SourceMap for the source code.\n- `originalSource`: The source code of the original file. Can be omitted if the `sourceMap` already contains the original source code.\n- `innerSourceMap`: The SourceMap for the `originalSource`/`name`.\n- `removeOriginalSource`: Removes the source code for `name` from the final map, keeping only the deeper mappings for that file.\n\nThe `SourceMapSource` supports \"identity\" mappings for the `innerSourceMap`.\nWhen original source matches generated source for a mapping it's assumed to be mapped char by char allowing to keep finer mappings from `sourceMap`.\n\n## `CachedSource`\n\nDecorates a `Source` and caches returned results of `map`, `source`, `buffer`, `size` and `sourceAndMap` in memory. `updateHash` is not cached.\nIt tries to reused cached results from other methods to avoid calculations, i. e. when `source` is already cached, calling `size` will get the size from the cached source, calling `sourceAndMap` will only call `map` on the wrapped Source.\n\n```typescript\nnew CachedSource(source: Source)\nnew CachedSource(source: Source | () => Source, cachedData?: CachedData)\n```\n\nInstead of passing a `Source` object directly one can pass an function that returns a `Source` object. The function is only called when needed and once.\n\n### Public methods\n\n#### `getCachedData()`\n\nReturns the cached data for passing to the constructor. All cached entries are converted to Buffers and strings are avoided.\n\n#### `original()`\n\nReturns the original `Source` object.\n\n#### `originalLazy()`\n\nReturns the original `Source` object or a function returning these.\n\n## `PrefixSource`\n\nPrefix every line of the decorated `Source` with a provided string.\n\n```typescript\nnew PrefixSource(\n\tprefix: String,\n\tsource: Source\n)\n```\n\n## `ConcatSource`\n\nConcatenate multiple `Source`s or strings to a single source.\n\n```typescript\nnew ConcatSource(\n\t...items?: Source | String\n)\n```\n\n### Public methods\n\n#### `add`\n\n```typescript\nConcatSource.prototype.add(item: Source | String)\n```\n\nAdds an item to the source.\n\n## `ReplaceSource`\n\nDecorates a `Source` with replacements and insertions of source code.\n\nThe `ReplaceSource` supports \"identity\" mappings for child source.\nWhen original source matches generated source for a mapping it's assumed to be mapped char by char allowing to split mappings at replacements/insertions.\n\n### Public methods\n\n#### `replace`\n\n```typescript\nReplaceSource.prototype.replace(\n\tstart: Number,\n\tend: Number,\n\treplacement: String\n)\n```\n\nReplaces chars from `start` (0-indexed, inclusive) to `end` (0-indexed, inclusive) with `replacement`.\n\nLocations represents locations in the original source and are not influenced by other replacements or insertions.\n\n#### `insert`\n\n```typescript\nReplaceSource.prototype.insert(\n\tpos: Number,\n\tinsertion: String\n)\n```\n\nInserts the `insertion` before char `pos` (0-indexed).\n\nLocation represents location in the original source and is not influenced by other replacements or insertions.\n\n#### `original`\n\nGet decorated `Source`.\n\n## `CompatSource`\n\nConverts a Source-like object into a real Source object.\n\n### Public methods\n\n#### static `from`\n\n```typescript\nCompatSource.from(sourceLike: any | Source)\n```\n\nIf `sourceLike` is a real Source it returns it unmodified. Otherwise it returns it wrapped in a CompatSource.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack/webpack-sources.git"
  },
  "scripts": {
    "cover": "jest --coverage",
    "lint": "eslint --cache lib test",
    "precover": "yarn lint",
    "pretest": "yarn lint",
    "test": "jest",
    "travis": "yarn cover"
  },
  "version": "2.3.0"
}
