{
  "_args": [
    [
      {
        "raw": "ajv-formats@2.0.2",
        "scope": null,
        "escapedName": "ajv-formats",
        "name": "ajv-formats",
        "rawSpec": "2.0.2",
        "spec": "2.0.2",
        "type": "version"
      },
      "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\core"
    ]
  ],
  "_from": "ajv-formats@2.0.2",
  "_hasShrinkwrap": false,
  "_id": "ajv-formats@2.0.2",
  "_location": "/ajv-formats",
  "_nodeVersion": "14.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ajv-formats_2.0.2_1617364362427_0.5726062548867314"
  },
  "_npmUser": {
    "name": "esp",
    "email": "e.poberezkin@me.com"
  },
  "_npmVersion": "6.14.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ajv-formats@2.0.2",
    "scope": null,
    "escapedName": "ajv-formats",
    "name": "ajv-formats",
    "rawSpec": "2.0.2",
    "spec": "2.0.2",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/core"
  ],
  "_resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.0.2.tgz",
  "_shasum": "69875cb99d76c74be46e9c7a4444bc232354eba0",
  "_shrinkwrap": null,
  "_spec": "ajv-formats@2.0.2",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\core",
  "author": {
    "name": "Evgeny Poberezkin"
  },
  "bugs": {
    "url": "https://github.com/ajv-validator/ajv-formats/issues"
  },
  "dependencies": {
    "ajv": "^8.0.0"
  },
  "description": "Format validation for Ajv v7+",
  "devDependencies": {
    "@ajv-validator/config": "^0.3.0",
    "@types/jest": "^26.0.5",
    "@types/node": "^14.10.1",
    "@typescript-eslint/eslint-plugin": "^3.7.0",
    "@typescript-eslint/parser": "^3.7.0",
    "ajv": "^8.0.0",
    "eslint": "^7.5.0",
    "eslint-config-prettier": "^6.11.0",
    "husky": "^4.2.5",
    "jest": "^26.1.0",
    "json-schema-test": "^2.0.0",
    "lint-staged": "^10.2.11",
    "prettier": "^2.0.5",
    "ts-jest": "^26.1.3",
    "typescript": "^4.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Brah4Uo5/U8v76c6euTwtjVFFaVishwnJrQBYpev1JRh4vjA1F4HY3UzQez41YUCszUCXKagG8v6eVRBHV1gkw==",
    "shasum": "69875cb99d76c74be46e9c7a4444bc232354eba0",
    "tarball": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.0.2.tgz",
    "fileCount": 15,
    "unpackedSize": 47935,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgZwWKCRA9TVsSAnZWagAA92sP/3/x3g1L+CBlTQzlBCfI\nanl2r4RqnuPabLjE90f3HW/VgigvMqc5OTILbFEGnEcDE5KJVo4i26aJm0NZ\npDCRfddhR6jBiscVpS3Hy/G4kdjdWMlgas3Wjwe/2u5k7u7aQXJCa5rC1Gfa\n6uEM46p/xPF98E9CXQ4mPTiV3OhntjAK+qml0E+LO4W2Q9IBJMuCjWZgz8cm\nKqOz4/iCBpYBw4+K8mS5I7iE0uaCXHZ0OCvY/86Q2N80SgNqvnadG48sNry+\nqlfn6IgTLx5cgyNVRry0pgaJC342t3bj7wUBLAfWLOOSzyaR70ywyDcO0MEo\nn5FsCw4o8mu9bURvP58fDtMHEUM2nozt9VGE/NptG/84gBm38OkYgrErTCPc\nBiPtAv0ImU3dxjBIistQsGv9FsU0LeM3GyKfAJdpDNdfcjj0kHBBvRwq8fiq\nmLm3lD3oYs+Z0GdLm21DTWp8KL0bcjTaKSWo2nkNSIRyA/PhdeAw6FPUDHN0\nIoCFa0gjrfZvumx+1KXj0XTEhdeAH+oRQTXcL788TozOlHuTRFq4JUHkJYLp\n42CIIH/wIh0FZUue7kiiammz/tYHOhwnz3CUNfcMncRG5V12TIgeazlSD8R7\nRBc/Zs7+A3jfD6mG/4NJbHeCstiEW6nczOE1JLlY/1MOeJphOVmLazwKoxwU\nvDMQ\r\n=W5/G\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "src/",
    "dist/"
  ],
  "gitHead": "0fd9f3fe1609ccf30abd9c4f15682ed2893fcb0a",
  "homepage": "https://github.com/ajv-validator/ajv-formats#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged && npm test"
    }
  },
  "keywords": [
    "Ajv",
    "JSON-Schema",
    "format",
    "validation"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.{md,json,yaml,js,ts}": "prettier --write"
  },
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "esp",
      "email": "e.poberezkin@me.com"
    },
    {
      "name": "additiveamateur",
      "email": "carlo@machina.bio"
    }
  ],
  "name": "ajv-formats",
  "optionalDependencies": {},
  "peerDependencies": {
    "ajv": "^8.0.0"
  },
  "peerDependenciesMeta": {
    "ajv": {
      "optional": true
    }
  },
  "prettier": "@ajv-validator/config/prettierrc.json",
  "readme": "# ajv-formats\n\nJSON Schema formats for Ajv\n\n[![Build Status](https://travis-ci.org/ajv-validator/ajv-formats.svg?branch=master)](https://travis-ci.org/ajv-validator/ajv-formats)\n[![npm](https://img.shields.io/npm/v/ajv-formats.svg)](https://www.npmjs.com/package/ajv-formats)\n[![Gitter](https://img.shields.io/gitter/room/ajv-validator/ajv.svg)](https://gitter.im/ajv-validator/ajv)\n[![GitHub Sponsors](https://img.shields.io/badge/$-sponsors-brightgreen)](https://github.com/sponsors/epoberezkin)\n\n## Usage\n\n```javascript\n// ESM/TypeScript import\nimport Ajv from \"ajv\"\nimport addFormats from \"ajv-formats\"\n// Node.js require:\nconst Ajv = require(\"ajv\")\nconst addFormats = require(\"ajv-formats\")\n\nconst ajv = new Ajv()\naddFormats(ajv)\n```\n\n## Formats\n\nThe package defines these formats:\n\n- _date_: full-date according to [RFC3339](http://tools.ietf.org/html/rfc3339#section-5.6).\n- _time_: time with optional time-zone.\n- _date-time_: date-time from the same source (time-zone is mandatory).\n- _duration_: duration from [RFC3339](https://tools.ietf.org/html/rfc3339#appendix-A)\n- _uri_: full URI.\n- _uri-reference_: URI reference, including full and relative URIs.\n- _uri-template_: URI template according to [RFC6570](https://tools.ietf.org/html/rfc6570)\n- _url_ (deprecated): [URL record](https://url.spec.whatwg.org/#concept-url).\n- _email_: email address.\n- _hostname_: host name according to [RFC1034](http://tools.ietf.org/html/rfc1034#section-3.5).\n- _ipv4_: IP address v4.\n- _ipv6_: IP address v6.\n- _regex_: tests whether a string is a valid regular expression by passing it to RegExp constructor.\n- _uuid_: Universally Unique IDentifier according to [RFC4122](http://tools.ietf.org/html/rfc4122).\n- _json-pointer_: JSON-pointer according to [RFC6901](https://tools.ietf.org/html/rfc6901).\n- _relative-json-pointer_: relative JSON-pointer according to [this draft](http://tools.ietf.org/html/draft-luff-relative-json-pointer-00).\n\nSee regular expressions used for format validation and the sources that were used in [formats.ts](https://github.com/ajv-validator/ajv-formats/blob/master/src/formats.ts).\n\n**Please note**: JSON Schema draft-07 also defines formats `iri`, `iri-reference`, `idn-hostname` and `idn-email` for URLs, hostnames and emails with international characters. These formats are available in [ajv-formats-draft2019](https://github.com/luzlab/ajv-formats-draft2019) plugin.\n\n## Keywords to compare values: `formatMaximum` / `formatMinimum` and `formatExclusiveMaximum` / `formatExclusiveMinimum`\n\nThese keywords allow to define minimum/maximum constraints when the format keyword defines ordering (`compare` function in format definition).\n\nThese keywords are added to ajv instance when ajv-formats is used without options or with option `keywords: true`.\n\nThese keywords apply only to strings. If the data is not a string, the validation succeeds.\n\nThe value of keywords `formatMaximum`/`formatMinimum` and `formatExclusiveMaximum`/`formatExclusiveMinimum` should be a string or [\\$data reference](https://github.com/ajv-validator/ajv/blob/master/docs/validation.md#data-reference). This value is the maximum (minimum) allowed value for the data to be valid as determined by `format` keyword. If `format` keyword is not present schema compilation will throw exception.\n\nWhen these keyword are added, they also add comparison functions to formats `\"date\"`, `\"time\"` and `\"date-time\"`. User-defined formats also can have comparison functions. See [addFormat](https://github.com/ajv-validator/ajv/blob/master/docs/api.md#api-addformat) method.\n\n```javascript\nrequire(\"ajv-formats\")(ajv)\n\nconst schema = {\n  type: \"string\",\n  format: \"date\",\n  formatMinimum: \"2016-02-06\",\n  formatExclusiveMaximum: \"2016-12-27\",\n}\n\nconst validDataList = [\"2016-02-06\", \"2016-12-26\"]\n\nconst invalidDataList = [\"2016-02-05\", \"2016-12-27\", \"abc\"]\n```\n\n## Options\n\nOptions can be passed via the second parameter. Options value can be\n\n1. The list of format names that will be added to ajv instance:\n\n```javascript\naddFormats(ajv, [\"date\", \"time\"])\n```\n\n**Please note**: when ajv encounters an undefined format it throws exception (unless ajv instance was configured with `strict: false` option). To allow specific undefined formats they have to be passed to ajv instance via `formats` option with `true` value:\n\n```javascript\nconst ajv = new Ajv((formats: {date: true, time: true})) // to ignore \"date\" and \"time\" formats in schemas.\n```\n\n2. Format validation mode (default is `\"full\"`) with optional list of format names and `keywords` option to add additional format comparison keywords:\n\n```javascript\naddFormats(ajv, {mode: \"fast\"})\n```\n\nor\n\n```javascript\naddFormats(ajv, {mode: \"fast\", formats: [\"date\", \"time\"], keywords: true})\n```\n\nIn `\"fast\"` mode the following formats are simplified: `\"date\"`, `\"time\"`, `\"date-time\"`, `\"uri\"`, `\"uri-reference\"`, `\"email\"`. For example `\"date\"`, `\"time\"` and `\"date-time\"` do not validate ranges in `\"fast\"` mode, only string structure, and other formats have simplified regular expressions.\n\n## Tests\n\n```bash\nnpm install\ngit submodule update --init\nnpm test\n```\n\n## License\n\n[MIT](https://github.com/ajv-validator/ajv-formats/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ajv-validator/ajv-formats.git"
  },
  "scripts": {
    "build": "tsc",
    "ci-test": "npm run test",
    "eslint": "eslint --ext .ts ./src/**/*",
    "prettier:check": "prettier --list-different \"./**/*.{md,json,yaml,js,ts}\"",
    "prettier:write": "prettier --write \"./**/*.{md,json,yaml,js,ts}\"",
    "test": "npm run prettier:check && npm run build && npm run eslint && npm run test-cov",
    "test-cov": "jest --coverage",
    "test-spec": "jest"
  },
  "types": "dist/index.d.ts",
  "version": "2.0.2"
}
