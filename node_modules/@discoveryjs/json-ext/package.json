{
  "_args": [
    [
      {
        "raw": "@discoveryjs/json-ext@0.5.2",
        "scope": "@discoveryjs",
        "escapedName": "@discoveryjs%2fjson-ext",
        "name": "@discoveryjs/json-ext",
        "rawSpec": "0.5.2",
        "spec": "0.5.2",
        "type": "version"
      },
      "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular"
    ]
  ],
  "_from": "@discoveryjs/json-ext@0.5.2",
  "_hasShrinkwrap": false,
  "_id": "@discoveryjs/json-ext@0.5.2",
  "_location": "/@discoveryjs/json-ext",
  "_nodeVersion": "12.20.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/json-ext_0.5.2_1608993642423_0.008773222405023429"
  },
  "_npmUser": {
    "name": "lahmatiy",
    "email": "rdvornov@gmail.com"
  },
  "_npmVersion": "6.14.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@discoveryjs/json-ext@0.5.2",
    "scope": "@discoveryjs",
    "escapedName": "@discoveryjs%2fjson-ext",
    "name": "@discoveryjs/json-ext",
    "rawSpec": "0.5.2",
    "spec": "0.5.2",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/build-angular"
  ],
  "_resolved": "https://registry.npmjs.org/@discoveryjs/json-ext/-/json-ext-0.5.2.tgz",
  "_shasum": "8f03a22a04de437254e8ce8cc84ba39689288752",
  "_shrinkwrap": null,
  "_spec": "@discoveryjs/json-ext@0.5.2",
  "_where": "c:\\Angular\\TaskManager\\node_modules\\@angular-devkit\\build-angular",
  "author": {
    "name": "Roman Dvornov",
    "email": "rdvornov@gmail.com",
    "url": "https://github.com/lahmatiy"
  },
  "browser": {
    "./src/stringify-stream.js": "./src/stringify-stream-browser.js",
    "./src/text-decoder.js": "./src/text-decoder-browser.js"
  },
  "bugs": {
    "url": "https://github.com/discoveryjs/json-ext/issues"
  },
  "dependencies": {},
  "description": "A set of utilities that extend the use of JSON",
  "devDependencies": {
    "@rollup/plugin-commonjs": "^15.1.0",
    "@rollup/plugin-json": "^4.1.0",
    "@rollup/plugin-node-resolve": "^9.0.0",
    "chalk": "^4.1.0",
    "coveralls": "^3.1.0",
    "eslint": "^7.6.0",
    "mocha": "^8.1.1",
    "nyc": "^15.1.0",
    "rollup": "^2.28.2",
    "rollup-plugin-terser": "^7.0.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-HyYEUDeIj5rRQU2Hk5HTB2uHsbRQpF70nvMhVzi+VJR0X+xNEhjPui4/kBf3VeH/wqD28PT4sVOm8qqLjBrSZg==",
    "shasum": "8f03a22a04de437254e8ce8cc84ba39689288752",
    "tarball": "https://registry.npmjs.org/@discoveryjs/json-ext/-/json-ext-0.5.2.tgz",
    "fileCount": 14,
    "unpackedSize": 78721,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf50tqCRA9TVsSAnZWagAAXi8P/ibeFAQdGjiYWcqqkBs+\n2dQHlAsDN63fDkc5zus5J8zF3YvRgQ/FhREzjwcMsDeETwuN4rmK1oV8rtUY\nf1g6gCgzdTWYGU34n5QjxUC3+p6NRlfN9PVAkk5qiIxYbOHQ6sP4joaPXE2C\nOEAb5IeHMAQ8hUsgmwHiANzvu1jVt9s32dmSQZ76g02g8M23FUTU6QbWdt0T\nCXlK8ANqwjnPpgfrbu3SxPQmrwp4iZv9I6xrvVbmEWGRxLFcvDx8uo/369k8\n2H0ec7l0my5MxAHRJR+2BzI8jP1fesqlVIxjioN9vkOHYqVv1x0eQ4aaPO+y\nsFAHLyWSVsXwdZI1an2g6l54zYwnuz7NEBQR52V4fFNn0DxM/Bxo0nGQo5Cm\nGNiaj/ppY1FCNlHJ2XMVVEcuKlZljr47IxpAQ3/tNBnMwcXLuH5hzR3scR7D\nryf3nj507r0NxgLkmtplamc3NaUXyFfGldbmlwC++DyJWZc6zKpXMxBHjFLt\nTEghKCxuqjk9VXKsICkQ0p6BcUF8VIHCxqHpfdslgwXPRCy8msuyq79lDu50\nsdTB3gV5h6SPCOTAqeah0Gp0TcSI3xJnHHPkJO7Zupgz/CnpJ9/Oa9JRTlkJ\n1jxhYzeIRQnsEFt/jynRHS7LnT0Rzkwe9BfcfQxswqRNEV3WmjA4cs5XRqdL\nBzUS\r\n=jmMa\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=10.0.0"
  },
  "files": [
    "dist",
    "src"
  ],
  "gitHead": "26a08f0fa6a52020bfe381ccff70aa6d3e28fe47",
  "homepage": "https://github.com/discoveryjs/json-ext#readme",
  "keywords": [
    "json",
    "utils",
    "stream",
    "async",
    "promise",
    "stringify",
    "info"
  ],
  "license": "MIT",
  "main": "./src/index",
  "maintainers": [
    {
      "name": "lahmatiy",
      "email": "rdvornov@gmail.com"
    },
    {
      "name": "smelukov",
      "email": "s.melukov@gmail.com"
    },
    {
      "name": "exdis",
      "email": "exsdis@gmail.com"
    }
  ],
  "name": "@discoveryjs/json-ext",
  "optionalDependencies": {},
  "readme": "# json-ext\n\n[![NPM version](https://img.shields.io/npm/v/@discoveryjs/json-ext.svg)](https://www.npmjs.com/package/@discoveryjs/json-ext)\n[![Build Status](https://travis-ci.org/discoveryjs/json-ext.svg?branch=master)](https://travis-ci.org/discoveryjs/json-ext)\n[![Coverage Status](https://coveralls.io/repos/github/discoveryjs/json-ext/badge.svg?branch=master)](https://coveralls.io/github/discoveryjs/json-ext?)\n\nA set of utilities that extend the use of JSON. Designed to be fast and memory efficient\n\nFeatures:\n\n- [x] `parseChunked()` – Parse JSON that comes by chunks (e.g. FS readable stream or fetch response stream)\n- [x] `stringifyStream()` – Stringify stream (Node.js)\n- [x] `stringifyInfo()` – Get estimated size and other facts of JSON.stringify() without converting a value to string\n- [ ] **TBD** Support for circular references\n- [ ] **TBD** Binary representation [branch](https://github.com/discoveryjs/json-ext/tree/binary)\n- [ ] **TBD** WHATWG [Streams](https://streams.spec.whatwg.org/) support\n\n## Install\n\n```bash\nnpm install @discoveryjs/json-ext\n```\n\n## API\n\n- [parseChunked(chunkEmitter)](#parsechunkedchunkemitter)\n- [stringifyStream(value[, replacer[, space]])](#stringifystreamvalue-replacer-space)\n- [stringifyInfo(value[, replacer[, space[, options]]])](#stringifyinfovalue-replacer-space-options)\n    - [Options](#options)\n        - [async](#async)\n        - [continueOnCircular](#continueoncircular)\n- [version](#version)\n\n### parseChunked(chunkEmitter)\n\nWorks the same as [`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) but takes `chunkEmitter` instead of string and returns [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n> NOTE: `reviver` parameter is not supported yet, but will be added in next releases.\n> NOTE: WHATWG streams aren't supported yet\n\nWhen to use:\n- It's required to avoid freezing the main thread during big JSON parsing, since this process can be distributed in time\n- Huge JSON needs to be parsed (e.g. >500MB on Node.js)\n- Needed to reduce memory pressure. `JSON.parse()` needs to receive the entire JSON before parsing it. With `parseChunked()` you may parse JSON as first bytes of it comes. This approach helps to avoid storing a huge string in the memory at a single time point and following GC.\n\n[Benchmark](https://github.com/discoveryjs/json-ext/tree/master/benchmarks#parse-chunked)\n\nUsage:\n\n```js\nconst { parseChunked } = require('@discoveryjs/json-ext');\n\n// as a regular Promise\nparseChunked(chunkEmitter)\n    .then(data => {\n        /* data is parsed JSON */\n    });\n\n// using await (keep in mind that not every runtime has a support for top level await)\nconst data = await parseChunked(chunkEmitter);\n```\n\nParameter `chunkEmitter` can be:\n- [`ReadableStream`](https://nodejs.org/dist/latest-v14.x/docs/api/stream.html#stream_readable_streams) (Node.js only)\n```js\nconst fs = require('fs');\nconst { parseChunked } = require('@discoveryjs/json-ext');\n\nparseChunked(fs.createReadStream('path/to/file.json'))\n```\n- Generator, async generator or function that returns iterable (chunks). Chunk might be a `string`, `Uint8Array` or `Buffer` (Node.js only):\n```js\nconst { parseChunked } = require('@discoveryjs/json-ext');\nconst encoder = new TextEncoder();\n\n// generator\nparseChunked(function*() {\n    yield '{ \"hello\":';\n    yield Buffer.from(' \"wor');    // Node.js only\n    yield encoder.encode('ld\" }'); // returns Uint8Array(5) [ 108, 100, 34, 32, 125 ]\n});\n\n// async generator\nparseChunked(async function*() {\n    for await (const chunk of someAsyncSource) {\n        yield chunk;\n    }\n});\n\n// function that returns iterable\nparseChunked(() => ['{ \"hello\":', ' \"world\"}'])\n```\n\nUsing with [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API):\n\n```js\nasync function loadData(url) {\n    const response = await fetch(url);\n    const reader = response.body.getReader();\n\n    return parseChunked(async function*() {\n        while (true) {\n            const { done, value } = await reader.read();\n\n            if (done) {\n                break;\n            }\n\n            yield value;\n        }\n    });\n}\n\nloadData('https://example.com/data.json')\n    .then(data => {\n        /* data is parsed JSON */\n    })\n```\n\n### stringifyStream(value[, replacer[, space]])\n\nWorks the same as [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify), but returns an instance of [`ReadableStream`](https://nodejs.org/dist/latest-v14.x/docs/api/stream.html#stream_readable_streams) instead of string.\n\n> NOTE: WHATWG Streams aren't supported yet, so function available for Node.js only for now\n\nDeparts from JSON.stringify():\n- Outputs `null` when `JSON.stringify()` returns `undefined` (since streams may not emit `undefined`)\n- A promise is resolving and the resulting value is stringifying as a regular one\n- A stream in non-object mode is piping to output as is\n- A stream in object mode is piping to output as an array of objects\n\nWhen to use:\n- Huge JSON needs to be generated (e.g. >500MB on Node.js)\n- Needed to reduce memory pressure. `JSON.stringify()` needs to generate the entire JSON before send or write it to somewhere. With `stringifyStream()` you may send a result to somewhere as first bytes of the result appears. This approach helps to avoid storing a huge string in the memory at a single time point.\n- The object being serialized contains Promises or Streams (see Usage for examples)\n\n[Benchmark](https://github.com/discoveryjs/json-ext/tree/master/benchmarks#stream-stringifying)\n\nUsage:\n\n```js\nconst { stringifyStream } = require('@discoveryjs/json-ext');\n\n// handle events\nstringifyStream(data)\n    .on('data', chunk => console.log(chunk))\n    .on('error', error => consold.error(error))\n    .on('finish', () => console.log('DONE!'));\n\n// pipe into a stream\nstringifyStream(data)\n    .pipe(writableStream);\n```\n\nUsing Promise or ReadableStream in serializing object:\n\n```js\nconst fs = require('fs');\nconst { stringifyStream } = require('@discoveryjs/json-ext');\n\n// output will be\n// {\"name\":\"example\",\"willSerializeResolvedValue\":42,\"fromFile\":[1, 2, 3],\"at\":{\"any\":{\"level\":\"promise!\"}}}\nstringifyStream({\n    name: 'example',\n    willSerializeResolvedValue: Promise.resolve(42),\n    fromFile: fs.createReadStream('path/to/file.json'), // support file content is \"[1, 2, 3]\", it'll be inserted as it\n    at: {\n        any: {\n            level: new Promise(resolve => setTimeout(() => resolve('promise!'), 100))\n        }\n    }\n})\n\n// in case several async requests are used in object, it's prefered\n// to put fastest requests first, because in this case\nstringifyStream({\n    foo: fetch('http://example.com/request_takes_2s').then(req => req.json()),\n    bar: fetch('http://example.com/request_takes_5s').then(req => req.json())\n});\n```\n\nUsing with [`WritableStream`](https://nodejs.org/dist/latest-v14.x/docs/api/stream.html#stream_writable_streams) (Node.js only):\n\n```js\nconst fs = require('fs');\nconst { stringifyStream } = require('@discoveryjs/json-ext');\n\n// pipe into a console\nstringifyStream(data)\n    .pipe(process.stdout);\n\n// pipe into a file\nstringifyStream(data)\n    .pipe(fs.createWriteStream('path/to/file.json'));\n\n// wrapping into a Promise\nnew Promise((resolve, reject) => {\n    stringifyStream(data)\n        .on('error', reject)\n        .pipe(stream)\n        .on('error', reject)\n        .on('finish', resolve);\n});\n```\n\n### stringifyInfo(value[, replacer[, space[, options]]])\n\n`value`, `replacer` and `space` arguments are the same as for `JSON.stringify()`.\n\nResult is an object:\n\n```js\n{\n    minLength: Number,  // minimal bytes when values is stringified\n    circular: [...],    // list of circular references\n    duplicate: [...],   // list of objects that occur more than once\n    async: [...]        // list of async values, i.e. promises and streams\n}\n```\n\nExample:\n\n```js\nconst { stringifyInfo } = require('@discoveryjs/json-ext');\n\nconsole.log(\n    stringifyInfo({ test: true }).minLength\n);\n// > 13\n// that equals '{\"test\":true}'.length\n```\n\n#### Options\n\n##### async\n\nType: `Boolean`  \nDefault: `false`\n\nCollect async values (promises and streams) or not.\n\n##### continueOnCircular\n\nType: `Boolean`  \nDefault: `false`\n\nStop collecting info for a value or not whenever circular reference is found. Setting option to `true` allows to find all circular references.\n\n### version\n\nThe version of library, e.g. `\"0.3.1\"`.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/discoveryjs/json-ext.git"
  },
  "scripts": {
    "build": "rollup --config",
    "build-and-test": "npm run build && npm run test:dist",
    "coverage": "nyc npm test",
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "lint": "eslint src test",
    "lint-and-test": "npm run lint && npm test",
    "prepublishOnly": "npm run build",
    "test": "mocha --reporter progress",
    "test:all": "npm run test:src && npm run test:dist",
    "test:dist": "MODE=dist npm test && MODE=dist-min npm test",
    "test:src": "npm test",
    "travis": "nyc npm run lint-and-test && npm run coveralls"
  },
  "version": "0.5.2"
}
